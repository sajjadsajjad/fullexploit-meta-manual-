import struct

def generate_nbns_request_header():
    transaction_id = 0x0000
    flags = 0x0000
    qdcount = 0x0001
    ancount = 0x0000
    nscount = 0x0000
    arcount = 0x0000
    question_name = b'\x20\x43\x4b' + b'\x41'*30 + b'\x00'
    question_type = 0x0021
    question_class = 0x0001

    nbns_request_1 = struct.pack("!HHHHHH",transaction_id, flags, qdcount, 
                    ancount, nscount, arcount)
    nbns_request_2 = struct.pack('!HH',question_type, question_class)
    return nbns_request_1 + question_name + nbns_request_2

def parse_nbns_response(packet_response):
    x = 0
    ip_header = packet_response[x:x+20]

    x += 20
    udp_header = packet_response[x:x+8]
    
    x += 8
    nbns_response_header = packet_response[x:]

    i = 0
    nbns_response_data_1 = nbns_response_header[i:i+12]

    i += 12
    answers_name = nbns_response_header[i:i+34]

    i += 34
    answers_type = nbns_response_header[i:i+2]

    i += 2
    answers_class = nbns_response_header[i:i+2]

    i += 2
    answers_ttl = nbns_response_header[i:i+4]

    i += 4
    answers_length = nbns_response_header[i:i+2]
    answers_length = int.from_bytes(answers_length, byteorder='big')

    i += 2
    answers_num_of_names = nbns_response_header[i:i+1]
    answers_num_of_names = int.from_bytes(answers_num_of_names, byteorder='big')

    i += 1
    answers_name_1 = nbns_response_header[i:i+16].decode().replace('\x00','').strip()

    return answers_name_1