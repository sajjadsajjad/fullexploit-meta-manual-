import socket
import struct
import time

class UDP_Packet:

    def __init__(self):
        self.time_out = 2
        self.udp_length = 0

    def generate_udp_packet(self, src_port, dest_port, trailer_length):
        
        src_port = src_port
        dest_port = dest_port

        self.udp_length = 8
        self.udp_length = self.udp_length + trailer_length

        checksum = 0

        udp_header = struct.pack('!HHHH', src_port, dest_port, self.udp_length, checksum)

        return udp_header


    def send_udp_packet(self, packet, dest_ip, port_num, sock):

        sock.sendto(packet,(dest_ip,port_num))
        t_end = time.time() + self.time_out
        while True:
            current_time = time.time()
            try:
                response = sock.recvfrom(1024)
                packet_data = response[0]

                recieved_from_port = int.from_bytes(packet_data[20:22], byteorder='big')
                sent_to_port = port_num

                recieved_from = response[1][0]
                if recieved_from == dest_ip and sent_to_port == recieved_from_port:
                    return packet_data
                    
                if current_time > t_end:
                    return False
            
            except socket.timeout:
                return False
