import re
import dns.resolver
import socket
from netaddr import IPNetwork
import ipaddress
import netifaces

single_ip_re = r'^\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}$'
ip_range_re = r'^\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}[-]\d{1,3}$'
ip_cidr_re = r'^\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}[\/]\d{1,2}$'

def getHostIP(interface):
    # """Get IP address of the source host

    # Returns
    # -------
    # string
    #     source host ip address
    # """

    if interface != '':
        host_ip = netifaces.ifaddresses(interface)
        host_ip = host_ip[netifaces.AF_INET][0]['addr']
    else:
        s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
        s.connect(("8.8.8.8",80))
        host_ip = s.getsockname()[0]

    return host_ip

def getNetworkIP(host_ip, mask):
    """Get first IP address of the network to which source host is connected

    Parameters
    ----------
    host_ip : string
        source host ip address
    mask : string
        subnet mask in cidr notation

    Returns
    -------
    ipaddress
        first ip address of the network
    """
    
    network_ip=IPNetwork(host_ip+'/'+str(mask)).network

    return network_ip

def process_ip(target_addr):

    try:
        ipaddress.IPv4Address(target_addr)
    except Exception as e:
        print(e)
        target_addr = 'Invalid IP'
    
    return target_addr

def process_ip_range(target_addr_range):
    ips_list = []
    target_addr = target_addr_range.split('-')
    try:
        ipaddress.IPv4Address(target_addr[0])
        
        ip_split = target_addr[0].rsplit('.',1)
        
        range_start = int(ip_split[1])
        range_end = int(target_addr[1])

        if ((range_start < range_end) and (range_start < 256 and range_end < 256)):
            for x in range(range_start, (range_end + 1)):
                ip = str(ip_split[0]) + '.' + str(x)
                ips_list.append(ip)
        else:
            print("[*] " + target_addr_range + ": " + 'Invalid IP Range')
    except Exception as e:
        print(e)

    return ips_list

def process_ip_subnet(target_addr):
    """Validatin IP with cidr notation

    Parameters
    ----------
    target_addr : string
        IP with cidr notation

    Returns
    -------
    dictionary
        dictionary containing ip address validation and subnet mask
    """

    target_addr = target_addr.split("/")
    ip = target_addr[0]
    cidr = target_addr[1]

    try:
        ipaddress.IPv4Address(ip)
        tempDict = dict(ip=ip, cidr=cidr)
        return tempDict
    except Exception as e:
        print(e)
        tempDict = dict(ip='Invalid IP', cidr=cidr)
        return tempDict

def process_target_address(target_addr, selected_interface):
    """Validating targets entered by the user 

    Parameters
    ----------
    target_addr : string
        target addresses
    """

    targets_list = []

    target_addr = target_addr.split(",")

    input_type = None

    for target in target_addr:
        
        target = target.strip()

        if re.match(single_ip_re, target):
            ip = process_ip(target)
            targets_list.append(ip)

            input_type = 'single_ip'
        
        elif re.match(ip_range_re, target):
            targets_list = process_ip_range(target)

            input_type = 'ip_range'
        
        elif re.match(ip_cidr_re, target):
            res_dict = process_ip_subnet(target)

            cidr_ip = res_dict['ip']
            cidr_subnet = res_dict['cidr']            
            
            host_ip = getHostIP(selected_interface)
            
            network_ip = getNetworkIP(host_ip, cidr_subnet)

            cidr = str(network_ip)+'/'+str(cidr_subnet)
            ips_list = list(ipaddress.ip_network(cidr).hosts())
            for ip in ips_list:
                targets_list.append(str(ip))

            input_type = 'cidr'
            
        else:
            try:
                result = dns.resolver.query(target, 'A')
                for ip in result:
                    targets_list.append(str(ip))
            except Exception as e:
                print(e)

            input_type = 'domain_name'

    return targets_list, input_type