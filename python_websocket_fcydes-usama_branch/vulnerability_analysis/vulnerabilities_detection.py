import sqlite3
from sqlite3 import Error
import sys
import re
import utilities
from collections import Counter

def connect_to_vulnerabilities_db():
    """ create a database connection to the SQLite database
        specified by the db_file
    :param db_file: database file
    :return: Connection object or None
    """

    path_to_vulnerabilities_db = './vulnerability_analysis/vulnerabilities_db.db'
    conn = None
    try:
        conn = sqlite3.connect(path_to_vulnerabilities_db)
    except Error as e:
        print(e)
        sys.exit(1)

    return conn

def connect_to_vulnerabilities_manual_db():
    """ create a database connection to the SQLite database
        specified by the db_file
    :param db_file: database file
    :return: Connection object or None
    """

    path_to_vulnerabilities_manual_db = './vulnerability_analysis/manual.db' 
    conn = None
    try:
        conn = sqlite3.connect(path_to_vulnerabilities_manual_db)
    except Error as e:
        print(e)
        sys.exit(1)

    return conn


def select_all_vulnerabilities(conn):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT * FROM vulnerability")

    return list(cur.fetchall())


def select_vulnerability_by_id(conn, id):
    """
    Query tasks by priority
    :param conn: the Connection object
    :param priority:
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT * FROM tasks WHERE cve_id=?", (id, ))
    return list(cur.fetchall())


def remove_extra_chars(str):
    return re.sub("[\(\[].*?[\)\]]", "", str)\
                .replace(")","")\
                .replace("(","")\
                .replace("/"," ")\
                .strip()\
                .split(" ")


def create_query(service_str, service_version):

    str1 = "SELECT * FROM vulnerability WHERE "
    service_str_ = ""
    service_version_ = ""
    for i in range(len(service_str)):
        if (service_str[i] == "-" or service_str[i] == ";"
                or service_str[i] == ","):
            pass

        else:
            if (i != (len(service_str) - 1)):
                service_str_ = service_str_ + "cve_description LIKE '%" + service_str[
                    i] + "%' AND "
            else:
                service_str_ = service_str_ + "cve_description LIKE '%" + service_str[
                    i] + "%'"

    ##############################can be improved##################
    ##############################i.e can start from range first number to last and add in final query##################

    for i in range(len(service_version)):
        if (service_version[i] == "-" or service_version[i] == ";"
                or service_version[i] == ","):
            pass
        else:
            if (i != (len(service_version) - 1)):
                service_version_ = service_version_ + "cve_description LIKE '%" + service_version[
                    i] + "%' OR "
            else:
                service_version_ = service_version_ + "cve_description LIKE '%" + service_version[
                    i] + "%'"

    if service_version:
        return str1 + service_str_ + " AND (" + service_version_ + ")"

    return (str1 + service_str_)


def get_service(service_version):

    service_version_keywords = remove_extra_chars(service_version)
    
    res = []
    str_version = []
    for service_version_keyword in service_version_keywords:
        service_version_keyword = service_version_keyword.lower()
        if (service_version_keyword == 'db' or service_version_keyword == 'software'):
            continue

        if service_version_keyword != '' and ('.' in service_version_keyword or service_version_keyword.isnumeric()):
            
            if service_version_keyword.isnumeric():
                str_version.append(service_version_keyword)
            else:
                temp_ver = service_version_keyword.split('.')
                version_list = []
                for val in temp_ver:
                    if val == 'x' or val == 'X':
                        version_list.append("_")
                    else:
                        version_list.append(val)

                temp_ver = version_list
                
                if (len(temp_ver) == 3):
                    str_version.append(temp_ver[0] + '.' + temp_ver[1] + '.' +
                                    temp_ver[2])
                    str_version.append(temp_ver[0] + '.' + temp_ver[1] + '.x')
                    str_version.append(temp_ver[0] + '.x')
                elif (len(temp_ver) == 2):
                    str_version.append(temp_ver[0] + '.' + temp_ver[1])
                    str_version.append(temp_ver[0] + '.x')
                else:
                    pos = service_version_keyword.find('.')
                    version = service_version_keyword[0:pos]
                    str_version.append(service_version_keyword)
                    str_version.append(version + '.x')

        else:
            res.append(service_version_keyword)

                # if service_version_keyword != '' and utilities.is_float(service_version_keyword):
        # if service_version_keyword != '' and ('.' in service_version_keyword or service_version_keyword.isnumeric()):
            
        #     pos = service_version_keyword.find('.')
        #     version = ''
        #     if (pos == -1):
        #         version = service_version_keyword
        #     else:
        #         version = service_version_keyword[0:pos]
        # elif service_version_keyword != '' and '.' in service_version_keyword:
        #     temp_ver = service_version_keyword.split('.')
        #     version_list = []
        #     for val in temp_ver:
        #         if val == 'x' or val == 'X':
        #             version_list.append("_")
        #         else:
        #             version_list.append(val)

        #     temp_ver = version_list
            
        #     if (len(temp_ver) == 3):
        #         str_version.append(temp_ver[0] + '.' + temp_ver[1] + '.' +
        #                            temp_ver[2])
        #         str_version.append(temp_ver[0] + '.' + temp_ver[1] + '.x')
        #         str_version.append(temp_ver[0] + '.x')
        #     elif (len(temp_ver) == 2):
        #         str_version.append(temp_ver[0] + '.' + temp_ver[1])
        #         str_version.append(temp_ver[0] + '.x')
        #     else:
        #         pos = service_version_keyword.find('.')
        #         version = service_version_keyword[0:pos]
        #         str_version.append(version + '.')

        # else:
        #     res.append(service_version_keyword)

    
    return [ele for ele in res if ele.strip("-")], str_version



def search_tokens_in_str(tokens, str):
    str_arr = str.split()
    res_len = len(tokens)
    for token in tokens:
        if (res_len > 0):
            for item in str_arr:
                tmp = item.replace(",", "").replace("(", "").replace(")", "").lower()

                if tmp.startswith(token.lower()) or tmp.endswith(token.lower()):
                    res_len -= 1
                    break
                else:
                    pass
    return res_len == 0


def search_any_token_in_str(tokens, str):
    str_arr = str.split()
    for token in tokens:
        t = token
        if token.endswith("_"):
            t = token.replace("_", "")

        for item in str_arr:
            if item.startswith(t) or item.endswith(t):
                return True

    return False


def search_vulnerabilities(conn, service_str, service_version):
    
    cur = conn.cursor()
    query = create_query(service_str, service_version)
    cur.execute(query)
    vulnerabilities_list = cur.fetchall()
    temp_vulns_list = []
    for vul in vulnerabilities_list:
        desc = vul[1]
        tokens_1 = search_tokens_in_str(service_str, desc)
        tokens_2 = search_any_token_in_str(service_version, desc)

        if service_version:
            if desc and tokens_1 and tokens_2:
                temp_vulns_list.append(vul)

        else:
            if desc and tokens_1:
                temp_vulns_list.append(vul)

    return temp_vulns_list


def search_manual_vulnerabilities(conn, service_version):
    
    cur = conn.cursor()
    query = 'SELECT Service_version,Service_Name, Exploit_number, Operating_Systems, Operating_system_version, cvss_number, cvss_severity from Non_Metasploit_Exploits  where Service_version = "' + service_version + '";'
    cur.execute(query)
    exploit_results = cur.fetchall()
    temp_vulns_list = []
    for vul in exploit_results:
        exploits_dict = dict(service_version=vul[0], service_name=vul[1], exploit_number=vul[2], os_name=vul[3], cvss_v3=vul[5], cvss_v3_severity=vul[6])

        temp_vulns_list.append(exploits_dict)

    return temp_vulns_list    

def set_list_for_vulnerabilities(list):
    temp = []
    for i in range(len(list)):
        temp.append({
            'port': list[i]['port'],
            'vendor_product_name': list[i]['vendor_product_name'],
            'version': list[i]['version']
        })
    return temp


def search_vulnerabilities_by_list(conn, list):
    """ serach vulnerabilities of array
    :param db-link: database file
    :param data: ports array of dict
    :return: array of dist
    """

    data_list = set_list_for_vulnerabilities(list)
    for i in range(len(data_list)):
        ser_ver = data_list[i]['vendor_product_name'] + " " + data_list[i]['version']
        service_str, service_version = get_service(remove_extra_chars(ser_ver))
        vulnerabilities = []
        if len(service_str):
            vulnerabilities = search_vulnerabilities(conn, service_str,
                                                     service_version)
        else:
            vulnerabilities = []
        data_list[i] = {
            'port': list[i]['port'],
            'vendor_product_name': list[i]['vendor_product_name'],
            'version': list[i]['version'],
            'vulnerabilities': vulnerabilities,
            "vulnerabilities_len": len(vulnerabilities)
        }
    return data_list

def vulnerabilities_detection(ports_data):
    
    db_conn = connect_to_vulnerabilities_db()
    
    critcal_cves = 0
    high_cves = 0
    medium_cves = 0
    low_cves = 0 
    none_cves = 0
    port_services_vulnerabilities = []

    temp_len = 0
    for port_data in ports_data:      
        service_version_display = port_data['vendor_product_name'] + ' ' + port_data['version']

        service_vulneralities_list = []

        if service_version_display != '':

            service_strings_list, service_versions_list = get_service(service_version_display)
            if len(service_strings_list)>0:
                vulnerabilities = search_vulnerabilities(db_conn, service_strings_list, service_versions_list)
                for vulnerability in vulnerabilities:
                    cve_id = vulnerability[0]
                    description = vulnerability[1]
                    cvss_v2 = vulnerability[2]
                    cvss_v2_severity = vulnerability[3]
                    cvss_v3 = vulnerability[4]
                    cvss_v3_severity = vulnerability[5]
                    exploit_resources = vulnerability[6]
                    patch_resources = vulnerability[7]
                    published_date = vulnerability[8]
                    last_modified_date = vulnerability[9]
                    assigner = vulnerability[10]
                    cve_data_timestamp = vulnerability[11]
                    cwe_id = vulnerability[13]

                    if cvss_v3_severity != '':
                        if cvss_v3_severity == 'CRITICAL':
                            critcal_cves += 1
                        elif cvss_v3_severity == 'HIGH':
                            high_cves += 1
                        elif cvss_v3_severity == 'MEDIUM':
                            medium_cves += 1
                        elif cvss_v3_severity == 'LOW':
                            low_cves += 1

                    elif cvss_v2_severity != '':
                        if cvss_v2_severity == 'HIGH':
                            high_cves += 1
                        elif cvss_v2_severity == 'MEDIUM':
                            medium_cves += 1
                        elif cvss_v2_severity == 'LOW':
                            low_cves += 1
                
                    else:
                        none_cves += 1
                                            
                    tempDict = dict(cve_id=cve_id, description=description, cvss_v2=cvss_v2, cvss_v2_severity=cvss_v2_severity, 
                                        cvss_v3=cvss_v3, cvss_v3_severity=cvss_v3_severity, exploit_resources=exploit_resources, 
                                        patch_resources=patch_resources, published_date=published_date, last_modified_date=last_modified_date,
                                        assigner=assigner, cve_data_timestamp=cve_data_timestamp, cwe_id=cwe_id)
                    service_vulneralities_list.append(tempDict)

        temp_len += len(service_vulneralities_list)
        service_with_vulnerabilities = dict(port_info=port_data, vulnerabilities=service_vulneralities_list)
        port_services_vulnerabilities.append(service_with_vulnerabilities)

    manual_vulnerability_list, manual_vulnerability_summary = vulnerabilities_detection_manual(ports_data)
    vulnerabilities_summary = dict(critical=critcal_cves, high=high_cves, medium=medium_cves, low=low_cves, info=none_cves)

    overall_summary = dict(Counter(vulnerabilities_summary)+Counter(manual_vulnerability_summary))

    return port_services_vulnerabilities, manual_vulnerability_list, overall_summary


def vulnerabilities_detection_manual(ports_data):
    
    db_conn = connect_to_vulnerabilities_manual_db()

    port_services_vulnerabilities = []

    temp_len = 0
    critcal_cves = 0
    high_cves = 0
    medium_cves = 0
    low_cves = 0 
    none_cves = 0
    port_services_vulnerabilities = []

    temp_len = 0

    for port_data in ports_data:
    
        service_vulneralities_list = []
        port = port_data['port']
        service_version = port_data['service_version_display']
        
        vulnerabilities = search_manual_vulnerabilities(db_conn, service_version)

        for vulnerability in vulnerabilities:

            cvss_v3 = vulnerability['cvss_v3']

            cvss_v3_severity  = vulnerability['cvss_v3_severity']
            
            if cvss_v3_severity == 'Critical':
                            critcal_cves += 1
            elif cvss_v3_severity == 'High':
                high_cves += 1
            elif cvss_v3_severity == 'Medium':
                medium_cves += 1
            elif cvss_v3_severity == 'low':
                low_cves += 1

                  
            tempDict = dict(cve_id='', description='', cvss_v2='', cvss_v2_severity='', 
                                cvss_v3=cvss_v3, cvss_v3_severity=cvss_v3_severity, exploit_resources='', 
                                patch_resources='', published_date='', last_modified_date='',
                                assigner='', cve_data_timestamp='', cwe_id='',port=port, service_version=vulnerability['service_version'], service_name=vulnerability['service_name'], exploit_number=vulnerability['exploit_number'], os_name=vulnerability['os_name'])
            service_vulneralities_list.append(tempDict)

            temp_len += len(service_vulneralities_list)
            service_with_vulnerabilities = dict(port_info=port_data, vulnerabilities=service_vulneralities_list)
            port_services_vulnerabilities.append(service_with_vulnerabilities)

        vulnerabilities_summary = dict(critical=critcal_cves, high=high_cves, medium=medium_cves, low=low_cves, info=none_cves)

    return port_services_vulnerabilities, vulnerabilities_summary

    

if __name__ == "__main__":

    # data = [{
#             'port': '22', 
#             'status': 'open', 
#             'service': 'ssh', 
#             'service_version_display': 'OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)', 
#             'vendor_product_name': 'OpenSSH', 
#             'version': '4.7p1 Debian 8ubuntu1', 
#             'info': 'protocol 2.0', 
#             'hostname': '', 
#             'operating_system': 
#             'Linux', 'device_type': ''
    #       }]

    ports_data = [{'port': '22', 'status': 'open', 'service': 'ssh', 'service_version_display': 'OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)', 'vendor_product_name': 'OpenSSH', 'version': '4.7p1 Debian 8ubuntu1', 'info': 'protocol 2.0', 'hostname': '', 'operating_system': 'Linux', 'device_type': ''}, {'port': '21', 'status': 'open', 'service': 'ftp', 'service_version_display': 'vsftpd 2.3.4', 'vendor_product_name': 'vsftpd', 'version': '2.3.4', 'info': '', 'hostname': '', 'operating_system': 'Unix', 'device_type': ''}, {'port': '514', 'status': 'open', 'service': 'shell', 'service_version_display': '', 'vendor_product_name': '', 'version': '', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '80', 'status': 'open', 'service': 'http', 'service_version_display': 'Apache httpd 2.2.8 ((Ubuntu) DAV)', 'vendor_product_name': 'Apache httpd', 'version': '2.2.8', 'info': '(Ubuntu) DAV', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '111', 'status': 'open', 'service': 'rpcbind', 'service_version_display': '', 'vendor_product_name': '', 'version': '', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '53', 'status': 'open', 'service': 'domain', 'service_version_display': 'ISC BIND 9.4.2', 'vendor_product_name': 'ISC BIND', 'version': '9.4.2', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '445', 'status': 'open', 'service': 'microsoft-ds', 'service_version_display': 'Samba smbd 3.X - 4.X (workgroup: $P(1))', 'vendor_product_name': 'Samba smbd', 'version': '3.X - 4.X', 'info': 'workgroup: $P(1)', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '25', 'status': 'open', 'service': 'smtp', 'service_version_display': 'Postfix smtpd', 'vendor_product_name': 'Postfix smtpd', 'version': '', 'info': '', 'hostname': ' metasploitable.localdomain', 'operating_system': '', 'device_type': ''}, {'port': '23', 'status': 'open', 'service': 'telnet', 'service_version_display': 'Linux telnetd', 'vendor_product_name': 'Linux telnetd', 'version': '', 'info': '', 'hostname': '', 'operating_system': 'Linux', 'device_type': ''}, {'port': '512', 'status': 'open', 'service': 'exec', 'service_version_display': 'netkit-rsh rexecd', 'vendor_product_name': 'netkit-rsh rexecd', 'version': '', 'info': '', 'hostname': '', 'operating_system': 'Linux', 'device_type': ''}, {'port': '513', 'status': 'open', 'service': 'login', 'service_version_display': '', 'vendor_product_name': '', 'version': '', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '1099', 'status': 'open', 'service': 'rmiregistry', 'service_version_display': '', 'vendor_product_name': '', 'version': '', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '139', 'status': 'open', 'service': 'netbios-ssn', 'service_version_display': 'Samba smbd 3.X - 4.X', 'vendor_product_name': 'Samba smbd', 'version': '3.X - 4.X', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '1524', 'status': 'open', 'service': 'ingreslock', 'service_version_display': 'Metasploitable root shell', 'vendor_product_name': 'Metasploitable root shell', 'version': '', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '2049', 'status': 'open', 'service': 'nfs', 'service_version_display': '', 'vendor_product_name': '', 'version': '', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '2121', 'status': 'open', 'service': 'ccproxy-ftp', 'service_version_display': 'ProFTPD 1.3.1', 'vendor_product_name': 'ProFTPD', 'version': '1.3.1', 'info': '', 'hostname': '', 'operating_system': 'Unix', 'device_type': ''}, {'port': '3306', 'status': 'open', 'service': 'mysql', 'service_version_display': 'MySQL 5.0.51a-3ubuntu5', 'vendor_product_name': 'MySQL', 'version': '5.0.51a-3ubuntu5', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '5432', 'status': 'open', 'service': 'postgresql', 'service_version_display': 'PostgreSQL DB 8.3.0 - 8.3.7', 'vendor_product_name': 'PostgreSQL DB', 'version': '8.3.0 - 8.3.7', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '8009', 'status': 'open', 'service': 'ajp13', 'service_version_display': 'Apache Jserv  (Protocol v1.3)', 'vendor_product_name': 'Apache Jserv', 'version': '', 'info': 'Protocol v1.3', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '6000', 'status': 'open', 'service': 'X11', 'service_version_display': '(access denied)', 'vendor_product_name': '', 'version': '', 'info': 'access denied', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '5900', 'status': 'open', 'service': 'vnc', 'service_version_display': 'VNC  (protocol 3.3)', 'vendor_product_name': 'VNC', 'version': '', 'info': 'protocol 3.3', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '6667', 'status': 'open', 'service': 'irc', 'service_version_display': '', 'vendor_product_name': '', 'version': '', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}, {'port': '8180', 'status': 'open', 'service': 'unknown', 'service_version_display': '', 'vendor_product_name': '', 'version': '', 'info': '', 'hostname': '', 'operating_system': '', 'device_type': ''}]
    port_services_vulnerabilities, vulnerabilities_summary = vulnerabilities_detection(ports_data)
    
