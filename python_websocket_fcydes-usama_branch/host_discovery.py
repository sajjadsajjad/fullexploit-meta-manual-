import socket
import select
import binascii
import codecs
from datetime import datetime
import multiprocessing
from multiprocessing.pool import ThreadPool
import json
import threading
import random
import target_validation
from concurrent.futures import ThreadPoolExecutor
import time
import utilities


import find_mac
import target_validation

from packet_headers import tcp_ip_headers

class HostDiscovery:

    def __init__(self, info_gather, user_id, web_socket):


        self.module = 'Host Discovery'

        self.sub_module = None

        self.identifier = 0

        self.count = 0

        self.ws = web_socket
        
        self.user_id = user_id
        
        self.source_host_ip = None

        self.dest_port=80

        self.source_port = None

        self.packet_header = tcp_ip_headers.Packet()

        self.packet = None

        self.time_out = 2

        self.up_count = 0

        self.info_gather = info_gather

    #---------------------------------------------------------------------------------------------------------#
    #                                              ICMP Ping                                                  #
    #---------------------------------------------------------------------------------------------------------#
    def icmp_ping_thread(self, target):
        
        self.identifier = self.identifier + 1
        packet_header = self.packet_header.generateICMPHeader(self.identifier)

        ICMP_CODE = socket.getprotobyname('icmp')
        sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, ICMP_CODE)
        sock.settimeout(self.time_out)
        response = self.packet_header.send_icmp_packet(packet_header, target, sock)
        if response:
            ip_addr, protocol = utilities.parse_icmp_response(response)

            dataDict1 = dict(dest_host=ip_addr, mac_vendor='', mac_addr='')
            self.info_gather.add_active_hosts_to_results(dataDict1)

            dataDict = dict(ip=ip_addr, manufacturer='', mac_addr='')
            tempDict = dict(user_id=self.user_id, eventType='host_found', data=dataDict)
            self.ws.send(json.dumps(tempDict))
            
    def icmp_ping(self, targets):
        
        self.sub_module = 'ICMP'
        event_type = 'icmp_ping_started'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)


        with ThreadPoolExecutor() as executor:
            for target in targets:
                executor.submit(self.icmp_ping_thread, target)

        self.sub_module = 'ICMP'
        event_type = 'icmp_ping_finished'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)


    #---------------------------------------------------------------------------------------------------------#
    #                                              TCP SYN                                                    #
    #---------------------------------------------------------------------------------------------------------#
    def tcp_syn_ping_thread(self, target):
        
        source_port = random.randint(10000, 20000)
        packet_header = self.packet_header.generateIPHeader(self.source_host_ip, target)+self.packet_header.generateTCPHeader(source_port, self.dest_port,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0)
        packet_header_hex = (codecs.encode(packet_header, 'hex').decode())
        port_num = packet_header_hex[44:48]
        sock = socket.socket(socket.AF_INET,socket.SOCK_RAW,socket.IPPROTO_TCP)
        sock.setsockopt(socket.IPPROTO_IP,socket.IP_HDRINCL,1)
        response = self.packet_header.send_tcp_packet(packet_header, target, port_num, sock)
        sock.close()
        if response:
            ip_addr, protocol = utilities.parse_tcp_response(response)
            dataDict1 = dict(dest_host=ip_addr, mac_vendor='', mac_addr='')
            self.info_gather.add_active_hosts_to_results(dataDict1)

            dataDict = dict(ip=ip_addr, manufacturer='', mac_addr='')
            tempDict = dict(user_id=self.user_id, eventType='host_found', data=dataDict)
            self.ws.send(json.dumps(tempDict))


    def tcp_syn_ping(self, targets):

        self.sub_module = 'TCP_SYN'
        event_type = 'tcp_syn_started'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)
        
        self.source_host_ip = target_validation.getHostIP(self.info_gather.interface)
 
        num_of_thread = multiprocessing.cpu_count()

        with ThreadPoolExecutor() as executor:
            for target in targets:
                executor.submit(self.tcp_syn_ping_thread, target)
             

        self.sub_module = 'TCP_SYN'
        event_type = 'tcp_syn_finished'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)

    #---------------------------------------------------------------------------------------------------------#
    #                                              TCP ACK                                                    #
    #---------------------------------------------------------------------------------------------------------#
    def tcp_ack_ping(self):
       
        self.sub_module = 'TCP_ACK'
        event_type = 'tcp_ack_started'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)
        
        self.source_host_ip = target_validation.getHostIP()

        num_of_thread = multiprocessing.cpu_count()

        with ThreadPoolExecutor() as executor:
            for target in targets:
                pass
                # executor.submit(self.tcp_syn_ping_thread, target)
                

        self.sub_module = 'TCP_ACK'
        event_type = 'tcp_ack_finished'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)
    

    #---------------------------------------------------------------------------------------------------------#
    #                                              ARP Ping                                                   #
    #---------------------------------------------------------------------------------------------------------#
    def arp_ping_thread(self, target):
        mac_info = find_mac.get_mac_address(target, self.info_gather.interface)
        if mac_info:
            self.info_gather.add_active_hosts_to_results(mac_info)
            mac_addr = ':'.join(mac_info['mac_addr'][i:i+2] for i in range(0,12,2))
            dataDict = dict(ip=mac_info['dest_host'], manufacturer=mac_info['mac_vendor'], mac_addr=mac_addr)
            tempDict = dict(user_id=self.user_id, eventType='host_found', data=dataDict)
            self.ws.send(json.dumps(tempDict))
            self.up_count += 1
    
    def arp_ping(self, targets):

        self.sub_module = 'ARP PING'
        event_type = 'arp_ping_started'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)

        self.source_host_ip = target_validation.getHostIP(self.info_gather.interface)
 
        num_of_thread = multiprocessing.cpu_count()

        with ThreadPoolExecutor() as executor:
            for target in targets:
                executor.submit(self.arp_ping_thread, target)
        
        
        self.sub_module = 'ARP PING'
        event_type = 'arp_ping_finished'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)
        

    def hybrid_scan(self, targets):
        
        self.icmp_ping(targets)

        for host in self.info_gather.info_gather_results:
            targets.remove(host['dest_host'])

        self.tcp_syn_ping(targets)
        
    def host_discovery(self, targets):
        
        self.sub_module = ''
        event_type = 'host_discovery_started'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)

        if self.info_gather.host_discovery_setting == 'arp':
            self.arp_ping(targets)
        elif self.info_gather.host_discovery_setting == 'icmp':
            self.icmp_ping(targets)
        elif self.info_gather.host_discovery_setting == 'tcp-syn':
            self.tcp_syn_ping(targets)
        elif self.info_gather.host_discovery_setting == 'hybrid':
            self.hybrid_scan(targets)

        self.sub_module = ''
        event_type = 'host_discovery_finished'
        self.info_gather.send_module_time_to_server(self.module, self.sub_module, event_type, None, None, None)

if __name__=='__main__':
    
    targets = target_validation.process_target_address('10.120.132.0/22')
    # targets = ['10.120.132.1','10.120.132.2','10.120.132.3','10.120.132.4','10.120.132.5','10.120.132.6','10.120.132.16','10.120.132.17','10.120.132.15','10.120.132.10']
    # h = HostDiscovery()
    # h.arp_ping(targets)
    # h.tcp_syn_ping(targets)