from struct import pack
from packet_headers import smb_headers
import binascii
import socket

NETBIOS_SESSION_MESSAGE = 0
NPR_NETBIOS_SESSION_SERVICE_LENGTH = 0x00002F
SESSION_SETUP_ANDX_REQUEST_NETBIOS_SESSION_SERVICE_LENGTH = 0x000088
SMB_COM_NEGOTIATE = 0x72
SMB_COM_SESSION_SETUP_ANDX = 0x73


def parse_andx_response(andx_data):
    andx_data = andx_data[0]
    i = 0
    
    message_type = andx_data[i:i+1]
    i += 1
    
    length = andx_data[i:i+3]
    i += 3

    server_component = andx_data[i:i+4]
    i += 4

    smb_command = andx_data[i:i+1]
    i += 1

    nt_status = andx_data[i:i+4]
    i += 4

    flags = andx_data[i:i+1]
    i += 1

    flags2 = andx_data[i:i+2]
    i += 2

    process_id_high = andx_data[i:i+2]
    i += 2

    signature = andx_data[i:i+8]
    i += 8

    reserved = andx_data[i:i+2]
    i += 2

    tid = andx_data[i:i+2]
    i += 2

    pid = andx_data[i:i+2]
    i += 2

    uid = andx_data[i:i+2]
    i += 2

    multiplex = andx_data[i:i+2]
    i += 2

    word_count = andx_data[i:i+1]
    i += 1

    andx_command = andx_data[i:i+1]
    i += 1

    reserved = andx_data[i:i+1]
    i += 1

    andx_offset = andx_data[i:i+2]
    i += 2

    action = andx_data[i:i+2]
    i += 2
    
    security_blob_length = andx_data[i:i+2]
    i += 2
    
    byte_count = andx_data[i:i+2]
    i += 2

    security_blob_length_int = int.from_bytes(security_blob_length, byteorder='little')
    security_blob = andx_data[i:i+security_blob_length_int]
    i += security_blob_length_int

    native_os = andx_data[i:]
    
    native_os = native_os.replace(b'\x00', b'|')
    return native_os.decode()


def smb_os_detection(host, port):

    native_os = ''
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 6)
        oldtimeout = sock.gettimeout()
        sock.settimeout(1)
        sock.connect((host, port))
        sock.settimeout(oldtimeout)
    except socket.error as e:
        pass

    p = smb_headers.Packet()
    netbios_session_packet = p.netbios_session_service(NPR_NETBIOS_SESSION_SERVICE_LENGTH)
    smb_header_packet = p.smb_header(SMB_COM_NEGOTIATE)
    smb_npr_packet = p.negotiate_protocol_request()

    smb_neg_pro_request_header = netbios_session_packet+smb_header_packet+smb_npr_packet
    if sock:
        try:
            sock.sendall(smb_neg_pro_request_header)
            neg_pro_response = sock.recvfrom(1024)
        except:
            pass
        # print(neg_pro_response)
        # print(binascii.hexlify(neg_pro_response))

    netbios_session_packet = p.netbios_session_service(SESSION_SETUP_ANDX_REQUEST_NETBIOS_SESSION_SERVICE_LENGTH)
    smb_header_packet = p.smb_header(SMB_COM_SESSION_SETUP_ANDX)
    smb_andx_req_packet = p.session_setup_andx_request_header()

    smb_andx_request_header = netbios_session_packet + smb_header_packet + smb_andx_req_packet
    # print(binascii.hexlify(smb_andx_request_header))

    if sock:
        try:
            sock.sendall(smb_andx_request_header)
            andx_response = sock.recvfrom(1024)
            # print(andx_response)
            native_os = parse_andx_response(andx_response)
        except:
            pass
        # print(binascii.hexlify(andx_response))
    # print(binascii.hexlify(netbios_session_packet+smb_header_packet+x))

    return native_os