from statistics import mean, stdev
import math

from . import os_detection_tests
# import os_detection_tests

def get_sec(p1_p6_res_list, ie_res_list, t2_t7_res_list, time_stamps_diff):
    
    # SEQ: GCD, SP, ISR, TI, II, TS, and SS

    
    # GCD
    gcd, diff1 = os_detection_tests.gcd_test(p1_p6_res_list)

    
    # ISR
    isr, seq_rates = os_detection_tests.isr_test(diff1, time_stamps_diff)
    
    # SP
    sp = os_detection_tests.sp_test(p1_p6_res_list, seq_rates, gcd)

    # TI
    flag = 'TI'
    ti = os_detection_tests.ti_ci_ii_test(p1_p6_res_list, flag)

    # CI
    flag = 'CI'
    ci = os_detection_tests.ti_ci_ii_test(t2_t7_res_list[3:], flag)

    # II
    flag = 'II'
    ii = os_detection_tests.ti_ci_ii_test(ie_res_list, flag)

    # TS
    ts = os_detection_tests.ts_test(p1_p6_res_list, time_stamps_diff)

    # SS
    ss = None
    if ti == 'RI' or ti == 'BI' or ti == 'I' and ti == ii:
        ss = os_detection_tests.ss_test(p1_p6_res_list, ie_res_list)

    
    
    seq = 'SEQ(SP=' + sp + '%' + \
            'GCD=' + str(hex(gcd))[2:] + '%' + \
            'ISR=' + isr
            
    if not ti == 'Ommit':

        seq += '%' + 'TI=' + ti

    if not ci == 'Ommit':

        seq += '%' + 'CI=' + ci

    if not ii == 'Ommit':
        
        seq += '%' + 'II=' + ii

    if ss:

        seq += '%' + 'SS=' + ss


    seq += '%TS=' + ts + ')'
                
    return seq
    
def get_ops(p1_p6_res_list):
    
    # OPS: Contains the TCP options received for each of the probes (the test names are O1 through 06)
    
    ops_1 = os_detection_tests.o_test(p1_p6_res_list[0])
    ops_2 = os_detection_tests.o_test(p1_p6_res_list[1])
    ops_3 = os_detection_tests.o_test(p1_p6_res_list[2])
    ops_4 = os_detection_tests.o_test(p1_p6_res_list[3])
    ops_5 = os_detection_tests.o_test(p1_p6_res_list[4])
    ops_6 = os_detection_tests.o_test(p1_p6_res_list[5])

    
    ops = 'OPS(O1=' + ops_1 + '%' + 'O2=' + ops_2 + '%' + 'O3=' + ops_3 + '%' + 'O4=' + ops_4 + '%' + 'O5=' + ops_5 + '%' + 'O6=' + ops_6 + ')'

    return ops

def get_win(p1_p6_res_list):

    # WIN: line contains window sizes for the probe responses (named W1 through W6)
    
    p1_win = os_detection_tests.w_test(p1_p6_res_list[0])
    p2_win = os_detection_tests.w_test(p1_p6_res_list[1])
    p3_win = os_detection_tests.w_test(p1_p6_res_list[2])
    p4_win = os_detection_tests.w_test(p1_p6_res_list[3])
    p5_win = os_detection_tests.w_test(p1_p6_res_list[4])
    p6_win = os_detection_tests.w_test(p1_p6_res_list[5])

    win = 'WIN(W1=' + p1_win + '%' + 'W2=' + p2_win + '%' + 'W3=' + p3_win + '%' + 'W4=' + p4_win + '%' + 'W5=' + p5_win + '%' + 'W6=' + p6_win + ')'

    return win


def get_t1(p, p_res, u1, u1_res):

    # T1: R, DF, T, TG, W, S, A, F, O, RD, and Q
    
    # R
    r = os_detection_tests.r_test(p_res)
    
    if r == 'Y':

        # DF
        df = os_detection_tests.df_test(p_res)

        # T
        t = os_detection_tests.t_test(p, p_res, u1, u1_res)


        # TG
        tg = os_detection_tests.tg_test(p_res)

        # W
        w = os_detection_tests.w_test(p_res)

        # S
        s = os_detection_tests.s_test(p, p_res)

        # A
        a = os_detection_tests.a_test(p, p_res)

        # F
        f= os_detection_tests.f_test(p_res) 
        
        # O
        o = os_detection_tests.o_test(p_res)

        # RD
        rd = os_detection_tests.rd_test(p_res)

        # Q
        q = os_detection_tests.q_test(p_res)

        if t:
            t1 = 'T1(R=' + r + '%' \
                + 'DF=' + df + '%' \
                + 'T=' + t + '%' \
                + 'S=' + s + '%' \
                + 'A=' + a + '%' \
                + 'F=' + f + '%' \
                + 'RD=' + rd + '%' \
                + 'Q=' + q + ')'
        else:
            t1 = 'T1(R=' + r + '%' \
                + 'DF=' + df + '%' \
                + 'TG=' + tg + '%' \
                + 'S=' + s + '%' \
                + 'A=' + a + '%' \
                + 'F=' + f + '%' \
                + 'RD=' + rd + '%' \
                + 'Q=' + q + ')'
    
    else:
        t1 = 'T1(R=N)'

    return t1
    
    
    

def get_t2_t7(p, p_res, u1, u1_res):
    # TX: R, DF, T, TG, W, S, A, F, O, RD, and Q

    # R
    r = os_detection_tests.r_test(p_res)
    
    if r == 'Y':

        # DF
        df = os_detection_tests.df_test(p_res)

        # T
        t = os_detection_tests.t_test(p, p_res, u1, u1_res)

        # TG
        tg = os_detection_tests.tg_test(p_res)

        # W
        w = os_detection_tests.w_test(p_res)

        # S
        s = os_detection_tests.s_test(p, p_res)

        # A
        a = os_detection_tests.a_test(p, p_res)

        # F
        f= os_detection_tests.f_test(p_res) 
        
        # O
        o = os_detection_tests.o_test(p_res)

        # RD
        rd = os_detection_tests.rd_test(p_res)

        # Q
        q = os_detection_tests.q_test(p_res)

        if t:
            t1 = 'R=' + r + '%' + \
                'DF=' + df + '%' + \
                'T=' + t + '%' + \
                'W=' + w + '%' + \
                'S=' + s + '%' + \
                'A=' + a + '%' + \
                'F=' + f + '%' + \
                'O=' + o + '%' + \
                'RD=' + rd + '%' + \
                'Q=' + q
        else:
            t1 = 'R=' + r + '%' + \
                'DF=' + df + '%' + \
                'TG=' + tg + '%' + \
                'W=' + w + '%' + \
                'S=' + s + '%' + \
                'A=' + a + '%' + \
                'F=' + f + '%' + \
                'O=' + o + '%' + \
                'RD=' + rd + '%' + \
                'Q=' + q
    
    else:
        t1 = 'R=N'

    return t1


def get_ie(p1, p1_res, p2, p2_res, u1, u1_res):
    # IE: R, DFI, T, TG, and CD

    # R
    r1 = os_detection_tests.r_test(p1_res)
    r2 = os_detection_tests.r_test(p2_res)

    if r1 == 'Y' and r2 == 'Y':
        # DFI
        dfi = os_detection_tests.dfi_test(p1, p1_res, p2, p2_res)

        # T
        t = os_detection_tests.t_test(p1, p1_res, u1, u1_res)

        # TG
        tg = os_detection_tests.tg_test(p1_res)

        # CD
        cd = os_detection_tests.cd_test(p1, p1_res, p2, p2_res)

        if t:
            ie = 'IE(' \
                +'DFI='+dfi+'%'\
                +'T='+t+'%'\
                +'CD='+cd+')' 

        else:
            ie = 'IE(' \
                +'DFI='+dfi+'%'\
                +'TG='+tg+'%'\
                +'CD='+cd+')'

    else:
        ie = 'IE(R=N)'

    return ie
def get_ecn(ecn, ecn_res, u1, u1_res):

    # ECN: R, DF, T, TG, W, O, CC, and Q
    
    # R
    r = os_detection_tests.r_test(ecn_res)
    t = None
    if r == 'Y':
        
        # DF
        df = os_detection_tests.df_test(ecn_res)

        # T
        t = os_detection_tests.t_test(ecn, ecn_res, u1, u1_res)
        
        # TG
        tg = os_detection_tests.tg_test(ecn_res)

        # W
        w = os_detection_tests.w_test(ecn_res)

        # O
        o = os_detection_tests.o_test(ecn_res)

        # CC
        cc = os_detection_tests.cc_test(ecn_res)

        # Q
        q = os_detection_tests.q_test(ecn_res)


    if t:
        ecn = 'ECN(R=' + r + '%' \
            + 'DF=' + df + '%' \
            + 'T=' + t + '%' \
            + 'W=' + w + '%' \
            + 'O=' + o + '%' \
            + 'CC=' + cc + '%' \
            + 'Q=' + q +')'
    else:
        ecn = 'ECN(R=' + r + '%' \
            + 'DF=' + df + '%' \
            + 'TG=' + tg + '%' \
            + 'W=' + w + '%' \
            + 'O=' + o + '%' \
            + 'CC=' + cc + '%' \
            + 'Q=' + q +')'
    
    return ecn

def get_u1(p, p_res):

    # UDP: R, DF, T, TG, IPL, UN, RIPL, RID, RIPCK, RUCK, and RUD
    # p.show()
    # p_res.show()
    
    # R
    r = os_detection_tests.r_test(p_res)
    if r == 'Y':
        # DF
        df = os_detection_tests.df_test(p_res)
        
        # T
        t = os_detection_tests.t_test(p, p_res)

        # TG
        tg = os_detection_tests.tg_test(p_res)
        
        # IPL
        ipl = os_detection_tests.ipl_test(p_res)
        
        # UN
        un = os_detection_tests.un_test(p_res)

        # RIPL
        ripl = os_detection_tests.ripl_test(p_res)

        # RID
        rid = os_detection_tests.rid_test(p_res)

        # RIPCK
        ripck = os_detection_tests.ripck_test(p, p_res)

        # RUCK
        ruck = os_detection_tests.ruck_test(p, p_res)

        # RUD
        rud = os_detection_tests.rud_test(p, p_res)
        
        if t:
            u1 = 'U1(' \
                + 'DF=' + df +'%' \
                + 'T=' + t +'%' \
                + 'IPL=' + ipl +'%' \
                + 'UN=' + un +'%' \
                + 'RIPL=' + ripl +'%' \
                + 'RID=' + rid +'%' \
                + 'RIPCK=' + ripck +'%' \
                + 'RUCK=' + ruck +'%' \
                + 'RUD=' + rud  \
                + ')'
        else:
            u1 = 'U1(' \
                + 'DF=' + df +'%' \
                + 'TG=' + tg +'%' \
                + 'IPL=' + ipl +'%' \
                + 'UN=' + un +'%' \
                + 'RIPL=' + ripl +'%' \
                + 'RID=' + rid +'%' \
                + 'RIPCK=' + ripck +'%' \
                + 'RUCK=' + ruck +'%' \
                + 'RUD=' + rud  \
                + ')'
    else:
        u1 = 'U1(R=N)'
    
    return u1
    