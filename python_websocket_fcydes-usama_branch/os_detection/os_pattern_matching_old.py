import sqlite3
import os
def read_db_patterns():
    os_db_path = os.getcwd() + '/python-client/os_detection/os_db.db'
    if os.path.exists(os_db_path):
        conn = sqlite3.connect(os_db_path)

        cursor = conn.cursor()

        cursor.execute('''SELECT * from os_prefixes;''')

        db_patterns = cursor.fetchall()

        conn.commit()

        conn.close()

        return db_patterns

    else:
        print("OS Pattens DB not found. Cannot continue OS Detection")
        
        exit()

def match_with_char(db_test_value, scy_test_value):

    match_found = False
    db_test_val_or_sign_list = db_test_value.split('|')
    if scy_test_value in db_test_val_or_sign_list:
        match_found = True

    return match_found

def match_with_hex(db_test_value, scy_test_value):
    
    match_found = False
    # only - exists #
    if ('-' in db_test_value) and (not '>' in db_test_value) and (not '<' in db_test_value) and (not '|' in db_test_value):
        
        global count1
        count1 += 1

        db_test_val_split = db_test_value.split('-')
        lower = db_test_val_split[0]
        upper = db_test_val_split[1]

        lower_int = int(lower,16)
        upper_int = int(upper,16)
        
        scy_val_int = int(scy_test_value, 16)

        if scy_val_int in range(lower_int, upper_int):
            match_found = True


    # only > exists #
    elif (not '-' in db_test_value) and ('>' in db_test_value) and (not '<' in db_test_value) and (not '|' in db_test_value):
        
        global count2
        count2 += 1

        db_test_val_split = db_test_value.split('>')
        upper = db_test_val_split[1]

        upper_int = int(upper,16)
        
        scy_val_int = int(scy_test_value, 16)

        if scy_val_int > upper_int:
            match_found = True

    
    # only < exists #
    elif (not '-' in db_test_value) and (not '>' in db_test_value) and ('<' in db_test_value) and (not '|' in db_test_value):
        
        global count3
        count3 += 1

        db_test_val_split = db_test_value.split('<')
        upper = db_test_val_split[1]

        upper_int = int(upper,16)
        
        scy_val_int = int(scy_test_value, 16)

        if scy_val_int < upper_int:
            match_found = True
    
    # only | exists #
    elif (not '-' in db_test_value) and (not '>' in db_test_value) and (not '<' in db_test_value) and ('|' in db_test_value):
        
        global count4
        count4 += 1

        db_test_val_split = db_test_value.split('|')
        if scy_test_value in db_test_val_split:
            match_found = True
    
    # - and > exists
    elif ('-' in db_test_value) and ('>' in db_test_value) and (not '<' in db_test_value) and (not '|' in db_test_value):
        global count5
        count5 += 1
    
    # - and < exists
    elif ('-' in db_test_value) and (not '>' in db_test_value) and ('<' in db_test_value) and (not '|' in db_test_value):
        global count6
        count6 += 1
    
    # - and | exists #
    elif ('-' in db_test_value) and (not '>' in db_test_value) and (not '<' in db_test_value) and ('|' in db_test_value):
        global count7
        count7 += 1

        db_test_val_split = db_test_value.split('|')

        for i in range(0, len(db_test_val_split)):
            
            if len(db_test_val_split[i].split('-')) == 2:
                db_test_val_range = db_test_val_split[i].split('-')
                lower = db_test_val_range[0]
                upper = db_test_val_range[1]

                lower_int = int(lower,16)
                upper_int = int(upper,16)
                
                scy_val_int = int(scy_test_value, 16)

                if scy_val_int in range(lower_int, upper_int):
                    match_found = True
                    break
            elif db_test_val_split[i] == scy_test_value:
                
                match_found = True
                break
                
    # > and < exists
    elif (not '-' in db_test_value) and ('>' in db_test_value) and ('<' in db_test_value) and (not '|' in db_test_value):
        pass
    
    # > and | exists #
    elif (not '-' in db_test_value) and ('>' in db_test_value) and (not '<' in db_test_value) and ('|' in db_test_value):
        
        db_test_val_split = db_test_value.split('|')

        for i in range(0, len(db_test_val_split)):

            if len(db_test_val_split[i].split('>')) == 2:
                db_test_val_gt = db_test_val_split[i].split('>')
                upper = db_test_val_gt[1]

                upper_int = int(upper,16)
                
                scy_val_int = int(scy_test_value, 16)

                if scy_val_int > upper_int:
                    match_found = True
                    break
            
            elif db_test_val_split[i] == scy_test_value:
                match_found = True
                break

    
    # < and | exists
    elif (not '-' in db_test_value) and (not '>' in db_test_value) and ('<' in db_test_value) and ('|' in db_test_value):
        pass
    
    # -, > and < exists
    elif ('-' in db_test_value) and ('>' in db_test_value) and ('<' in db_test_value) and (not '|' in db_test_value):
        global count8
        count8 += 1

    # -, > and | exists #
    elif ('-' in db_test_value) and ('>' in db_test_value) and (not '<' in db_test_value) and ('|' in db_test_value):
        global count9
        count9 += 1
        
        db_test_val_split = db_test_value.split('|')

        for i in range(0, len(db_test_val_split)):
            if len(db_test_val_split[i].split('-')) == 2:
                db_test_val_range = db_test_val_split[i].split('-')
                lower = db_test_val_range[0]
                upper = db_test_val_range[1]

                lower_int = int(lower,16)
                upper_int = int(upper,16)
                
                scy_val_int = int(scy_test_value, 16)

                if scy_val_int in range(lower_int, upper_int):
                    match_found = True
                    break
            elif len(db_test_val_split[i].split('>')) == 2:

                db_test_val_hex_sign_list = db_test_val_split[i].split('>')
                upper = db_test_val_hex_sign_list[1]

                upper_int = int(upper,16)
                
                scy_val_int = int(scy_test_value, 16)

                if scy_val_int > upper_int:
                    match_found = True
                    break
            
            elif db_test_val_split[i] == scy_test_value:
                
                match_found = True
                break


    # -, >, < and | exists
    elif ('-' in db_test_value) and ('>' in db_test_value) and ('<' in db_test_value) and ('|' in db_test_value):
        global count10
        count10 += 1

    else:
        
        
        if (int(db_test_value,16) == int(scy_test_value,16)):
            match_found = True
        

    return match_found


count1 = 0
count2 = 0
count3 = 0
count4 = 0
count5 = 0
count6 = 0
count7 = 0
count8 = 0
count9 = 0
count10 = 0
# def test_match(db_pattern_1, scy_pattern_1):
    
#     value_match_len = 0
#     try:
#         db_test_values = db_pattern_1.split('(')[1].strip(')').split('%')

#     except:
#         db_test_values = ''

#     scy_test_values = scy_pattern_1.split('(')[1].strip(')').split('%')

#     # print(db_test_values)
#     # print(scy_test_values)

#     # tests with hex values: GCD, ISR, SP, T, TG, RD, IPL, UN, W
#     # tests with hex cum char values: TS, RIPL, RID, RUCK, CD, TI, CI, II
#     # tests with char values: RUD, RIPCK, F, A, S, Q, CC, DFI, DF, R, O, SS
#     tests_with_hex = ['GCD', 'ISR', 'SP', 'T', 'TG', 'RD', 'IPL', 'UN', 'W', 'W1', 'W2', 'W3', 'W4', 'W5', 'W6']
#     tests_with_char = ['RUD', 'RIPCK', 'F', 'A', 'S', 'Q', 'CC', 'DFI', 'DF', 'R', 'O', 'SS', 'O1', 'O2', 'O3', 'O4', 'O5', 'O6']
#     test_with_both = ['TS', 'RIPL', 'RID', 'RUCK', 'CD', 'TI', 'CI', 'II']
    

#     for i in range(0, len(db_test_values)):
#         db_test_vals = db_test_values[i].split('=')
#         db_test_name = db_test_vals[0]
#         for j in range(0, len(scy_test_values)):
#             scy_test_vals = scy_test_values[j].split('=')
#             scy_test_name = scy_test_vals[0]

#             if db_test_name == scy_test_name:
                
#                 if len(db_test_vals) == 2:
#                     db_test_name = db_test_vals[0]
#                     db_test_value = db_test_vals[1]
#                 else:
#                     db_test_name = db_test_vals[0]
#                     db_test_value = ''

#                 if len(scy_test_vals) == 2:            
#                     scy_test_name = scy_test_vals[0]
#                     scy_test_value = scy_test_vals[1]

#                 else:
#                     scy_test_name = scy_test_vals[0]
#                     scy_test_value = ''


#                 if db_test_name in tests_with_hex:
                    
#                     match_found = match_with_hex(db_test_value, scy_test_value)
                    
#                     if match_found:
#                         value_match_len += 1
            
            
#                 elif db_test_name in tests_with_char:
                    
#                     match_found = match_with_char(db_test_value, scy_test_value)
                    
#                     if match_found:
#                         value_match_len += 1
                        

#                 elif db_test_name in test_with_both:
#                     # print(scy_test_value)
#                     # print(scy_test_name + ': ' + scy_test_value)
#                     if scy_test_name == 'TS':
#                         if scy_test_value == '0' or scy_test_value == 'U' or scy_test_value == '1' or scy_test_value == '7' or scy_test_value == '8' or scy_test_value == 'A':
#                             # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
#                             match_found = match_with_char(db_test_value, scy_test_value)    
#                             if match_found:
#                                 # print(db_test_name + ': ' + db_test_value)
#                                 value_match_len += 1

#                         # else:
#                         #     match_found = match_with_hex(db_test_value, scy_test_value)
#                         #     if match_found:
#                         #         value_match_len += 1
                        

#                     elif scy_test_name == 'RIPL':
#                         if scy_test_value == 'G':
#                             # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
#                             match_found = match_with_char(db_test_value, scy_test_value)    
#                             if match_found:
#                                 # print(db_test_name + ': ' + db_test_value)
#                                 value_match_len += 1
#                         else:
#                             print(scy_test_name + ': ' + scy_test_value)

#                     elif scy_test_name == 'RID':
#                         if scy_test_value == 'G':
#                             # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
#                             match_found = match_with_char(db_test_value, scy_test_value)    
#                             if match_found:
#                                 # print(db_test_name + ': ' + db_test_value)
#                                 value_match_len += 1
#                         else:
#                             match_found = match_with_hex(db_test_value, scy_test_value)
#                             if match_found:
#                                 value_match_len += 1

#                     elif scy_test_name == 'RUCK':
#                         if scy_test_value == 'G':
#                             # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
#                             match_found = match_with_char(db_test_value, scy_test_value)    
#                             if match_found:
#                                 # print(db_test_name + ': ' + db_test_value)
#                                 value_match_len += 1
#                         else:
#                             match_found = match_with_hex(db_test_value, scy_test_value)
#                             if match_found:
#                                 value_match_len += 1

#                     elif scy_test_name == 'CD':
#                         if scy_test_value == 'Z' or scy_test_value == 'S' or scy_test_value == 'O':
#                             # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
#                             match_found = match_with_char(db_test_value, scy_test_value)    
#                             if match_found:
#                                 # print(db_test_name + ': ' + db_test_value)
#                                 value_match_len += 1
#                         else:
#                             match_found = match_with_hex(db_test_value, scy_test_value)
#                             if match_found:
#                                 value_match_len += 1

#                     elif scy_test_name == 'TI':
#                         if scy_test_value == 'Z' or scy_test_value == 'RD' or scy_test_value == 'RI'  or scy_test_value == 'BI'  or scy_test_value == 'I':
#                             # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
#                             match_found = match_with_char(db_test_value, scy_test_value)    
#                             if match_found:
#                                 # print(db_test_name + ': ' + db_test_value)
#                                 value_match_len += 1
#                         else:
#                             match_found = match_with_hex(db_test_value, scy_test_value)
#                             if match_found:
#                                 value_match_len += 1

#                     elif scy_test_name == 'CI':
#                         if scy_test_value == 'Z' or scy_test_value == 'RD' or scy_test_value == 'RI'  or scy_test_value == 'BI'  or scy_test_value == 'I':
#                             # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
#                             match_found = match_with_char(db_test_value, scy_test_value)    
#                             if match_found:
#                                 # print(db_test_name + ': ' + db_test_value)
#                                 value_match_len += 1
#                         else:
#                             match_found = match_with_hex(db_test_value, scy_test_value)
#                             if match_found:
#                                 value_match_len += 1

#                     elif scy_test_name == 'II':
#                         if scy_test_value == 'Z' or scy_test_value == 'RD' or scy_test_value == 'RI'  or scy_test_value == 'BI'  or scy_test_value == 'I':
#                             # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
#                             match_found = match_with_char(db_test_value, scy_test_value)    
#                             if match_found:
#                                 # print(db_test_name + ': ' + db_test_value)
#                                 value_match_len += 1
#                         else:
#                             match_found = match_with_hex(db_test_value, scy_test_value)
#                             if match_found:
#                                 value_match_len += 1

#                 break        
#                     # if ('-' in db_test_val) or  ('>' in db_test_val) or ('<' in db_test_val) or ('|' in db_test_val):
#                     #     print(db_test_val)
#                     #     global count
#                     #     count += 1
                    
#                     # if ('-' in db_test_val) or ('>' in db_test_val) or ('<' in db_test_val) or ('|' in db_test_val):
#                     #     # print(db_test_val)
#                     #     global count1
#                     #     count1 += 1

#                     # if ('-' in db_test_val) and (not '>' in db_test_val) and (not '<' in db_test_val) and (not '|' in db_test_val):
#                     #     # print(db_test_val)
#                     #     global count2
#                     #     count2 += 1
#                     # elif (not '-' in db_test_val) and ('>' in db_test_val) and (not '<' in db_test_val) and (not '|' in db_test_val):
#                     #     # print(db_test_val)
#                     #     global count3
#                     #     count3 += 1
#                     # elif (not '-' in db_test_val) and (not '>' in db_test_val) and ('<' in db_test_val) and (not '|' in db_test_val):
#                     #     # print(db_test_val)
#                     #     global count4
#                     #     count4 += 4
#                     # elif (not '-' in db_test_val) and (not '>' in db_test_val) and (not '<' in db_test_val) and ('|' in db_test_val):
#                     #     # print(db_test_val)
#                     #     global count5
#                     #     count5 += 1
                    
#                     # elif ('-' in db_test_val) and (not '>' in db_test_val) and (not '<' in db_test_val) and ('|' in db_test_val):
#                     #     # print(db_test_val)
#                     #     global count6
#                     #     count6 += 1
#                     # elif ('-' in db_test_val) and ('>' in db_test_val) and (not '<' in db_test_val) and ('|' in db_test_val):
#                     #     # print(db_test_val)
#                     #     global count7
#                     #     count7 += 1
#                     # else:
#                     #     pass

                
#                 # if '-' in db_test_val and '>' in db_test_val and '<' in db_test_val or '|' in db_test_val:
#                 #     print(db_test_val)
#                 # if '-' in db_test_val and '>' in db_test_val and '<' in db_test_val and '|' in db_test_val:
#                 #     print(db_test_val)
#                 # if '-' in db_test_val and '>' in db_test_val and '<' in db_test_val and '|' in db_test_val:
#                 #     print(db_test_val)
#                 # if '-' in db_test_val:
#                 #     db_test_val_hex_sign_list = db_test_val.split('-')
#                 #     lower = db_test_val_hex_sign_list[0]
#                 #     upper = db_test_val_hex_sign_list[1]
                    
#                 #     lower_hexes = lower.split('|')
#                 #     upper_hexes = upper.split('|')

#                 #     if len(db_test_val_hex_sign_list)>2:
#                 #         print(db_test_val)
#                 #     # if '>' in lower or '>' in upper:
#                 #     #     print(db_test_val)
                    
#                 #     # if '<' in lower or '<' in upper:
#                 #     #     print(db_test_val)

#                 #     # hex_found_in_range = False
#                 #     # try:
#                 #     #     for i in range(0, len(lower_hexes)):
#                 #     #         lower_int = int(lower_hexes[i],16)
#                 #     #         for j in range(0, len(upper_hexes)):
#                 #     #             upper_int = int(upper_hexes[j], 16)

#                 #     #             if scy_test_val in range(lower_int, upper_int):
#                 #     #                 value_match_len += 1
#                 #     #                 hex_found_in_range = True
#                 #     #                 break
#                 #     #         if hex_found_in_range:
#                 #     #             break
#                 #     # except:
#                 #     #     print("sd")
#                 # elif '>' in db_test_val:
#                 #     db_test_val_hex_sign_list = db_test_val.split('>')
#                 #     lower = db_test_val_hex_sign_list[0]
#                 #     upper = db_test_val_hex_sign_list[1]

#                 #     lower_hexes = lower.split('|')
#                 #     upper_hexes = upper.split('|')

#                 # elif '<' in db_test_val:
#                 #     db_test_val_hex_sign_list = db_test_val.split('<')
#                 #     lower = db_test_val_hex_sign_list[0]
#                 #     upper = db_test_val_hex_sign_list[1]

#                 #     lower_hexes = lower.split('|')
#                 #     upper_hexes = upper.split('|')

#                 # else:

#                 #     lower_hexes = db_test_val.split('|')
                    
                


#             # elif db_test in tests_with_char:
#             #     db_test_val_or_sign_list = db_test_val.split('|')   # character can only have | out of -, > and <
#             #     if scy_test_val in db_test_val_or_sign_list:
#             #         value_match_len +=1
                    

#             # elif db_test in test_with_both:
#             #     pass

#             # else:
#             #     return False
        
#         # print(value_match_len)
#     if value_match_len == len(scy_test_values):
#         return True
    
#     else:
#         return False
#     #     print(db_test_values)
#     #     print(scy_test_values)

#     # else:
#     #     return False
match_points_dict = {
    'SEQ':{'SP':25,'GCD':75,'ISR':25,'TI':100,'CI':50,'II':100,'SS':80,'TS':100},
    'OPS':{'O1':20,'O2':20,'O3':20,'O4':20,'O5':20,'O6':20},
    'WIN':{'W1':15,'W2':15,'W3':15,'W4':15,'W5':15,'W6':15},
    'ECN':{'R':100,'DF':20,'T':15,'TG':15,'W':15,'O':15,'CC':100,'Q':20},
    'T1':{'R':100,'DF':20,'T':15,'TG':15,'S':20,'A':20,'F':30,'RD':20,'Q':20},
    'T2':{'R':80,'DF':20,'T':15,'TG':15,'W':25,'S':20,'A':20,'F':30,'O':10,'RD':20,'Q':20},
    'T3':{'R':80,'DF':20,'T':15,'TG':15,'W':25,'S':20,'A':20,'F':30,'O':10,'RD':20,'Q':20},
    'T4':{'R':100,'DF':20,'T':15,'TG':15,'W':25,'S':20,'A':20,'F':30,'O':10,'RD':20,'Q':20},
    'T5':{'R':100,'DF':20,'T':15,'TG':15,'W':25,'S':20,'A':20,'F':30,'O':10,'RD':20,'Q':20},
    'T6':{'R':100,'DF':20,'T':15,'TG':15,'W':25,'S':20,'A':20,'F':30,'O':10,'RD':20,'Q':20},
    'T7':{'R':80,'DF':20,'T':15,'TG':15,'W':25,'S':20,'A':20,'F':30,'O':10,'RD':20,'Q':20},
    'U1':{'R':50,'DF':20,'T':15,'TG':15,'IPL':100,'UN':100,'RIPL':100,'RID':100,'RIPCK':100,'RUCK':100,'RUD':100},
    'IE':{'R':50,'DFI':40,'T':15,'TG':15,'CD':100},
}
def test_match(db_pattern_1, scy_pattern_1, possible_matchpoints, pattern_name):
            # t4_match, t4_match_points= test_match(db_t4, scydes_t4, possible_match_points['T4'], 'T4')
    
    if scy_pattern_1 != '':
        value_match_len = 0
        try:
            db_test_values = db_pattern_1.split('(')[1].strip(')').split('%')

        except:
            db_test_values = ''

        scy_test_values = scy_pattern_1.split('(')[1].strip(')').split('%')

        # print(db_test_values)
        # print(scy_test_values)

        # tests with hex values: GCD, ISR, SP, T, TG, RD, IPL, UN, W
        # tests with hex cum char values: TS, RIPL, RID, RUCK, CD, TI, CI, II
        # tests with char values: RUD, RIPCK, F, A, S, Q, CC, DFI, DF, R, O, SS
        tests_with_hex = ['GCD', 'ISR', 'SP', 'T', 'TG', 'RD', 'IPL', 'UN', 'W', 'W1', 'W2', 'W3', 'W4', 'W5', 'W6']
        tests_with_char = ['RUD', 'RIPCK', 'F', 'A', 'S', 'Q', 'CC', 'DFI', 'DF', 'R', 'O', 'SS', 'O1', 'O2', 'O3', 'O4', 'O5', 'O6']
        test_with_both = ['TS', 'RIPL', 'RID', 'RUCK', 'CD', 'TI', 'CI', 'II']
        
        match_points = 0
        for i in range(0, len(db_test_values)):
            db_test_vals = db_test_values[i].split('=')
            db_test_name = db_test_vals[0]
            for j in range(0, len(scy_test_values)):
                scy_test_vals = scy_test_values[j].split('=')
                scy_test_name = scy_test_vals[0]

                if db_test_name == scy_test_name:
                    
                    if len(db_test_vals) == 2:
                        db_test_name = db_test_vals[0]
                        db_test_value = db_test_vals[1]
                    else:
                        db_test_name = db_test_vals[0]
                        db_test_value = ''

                    if len(scy_test_vals) == 2:            
                        scy_test_name = scy_test_vals[0]
                        scy_test_value = scy_test_vals[1]

                    else:
                        scy_test_name = scy_test_vals[0]
                        scy_test_value = ''


                    if db_test_name in tests_with_hex:
                        
                        match_found = match_with_hex(db_test_value, scy_test_value)
                        
                        if match_found:
                            value_match_len += 1
                            match_points += match_points_dict[pattern_name][db_test_name]
                
                
                    elif db_test_name in tests_with_char:
                        
                        match_found = match_with_char(db_test_value, scy_test_value)
                        
                        if match_found:
                            value_match_len += 1
                            match_points += match_points_dict[pattern_name][db_test_name]
                            

                    elif db_test_name in test_with_both:
                        # print(scy_test_value)
                        # print(scy_test_name + ': ' + scy_test_value)
                        if scy_test_name == 'TS':
                            if scy_test_value == '0' or scy_test_value == 'U' or scy_test_value == '1' or scy_test_value == '7' or scy_test_value == '8' or scy_test_value == 'A':
                                # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
                                match_found = match_with_char(db_test_value, scy_test_value)    
                                if match_found:
                                    # print(db_test_name + ': ' + db_test_value)
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]

                            # else:
                            #     match_found = match_with_hex(db_test_value, scy_test_value)
                            #     if match_found:
                            #         value_match_len += 1
                            

                        elif scy_test_name == 'RIPL':
                            if scy_test_value == 'G':
                                # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
                                match_found = match_with_char(db_test_value, scy_test_value)    
                                if match_found:
                                    # print(db_test_name + ': ' + db_test_value)
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]
                            else:
                                print(scy_test_name + ': ' + scy_test_value)

                        elif scy_test_name == 'RID':
                            if scy_test_value == 'G':
                                # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
                                match_found = match_with_char(db_test_value, scy_test_value)    
                                if match_found:
                                    # print(db_test_name + ': ' + db_test_value)
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]
                            else:
                                match_found = match_with_hex(db_test_value, scy_test_value)
                                if match_found:
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]

                        elif scy_test_name == 'RUCK':
                            if scy_test_value == 'G':
                                # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
                                match_found = match_with_char(db_test_value, scy_test_value)    
                                if match_found:
                                    # print(db_test_name + ': ' + db_test_value)
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]
                            else:
                                match_found = match_with_hex(db_test_value, scy_test_value)
                                if match_found:
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]

                        elif scy_test_name == 'CD':
                            if scy_test_value == 'Z' or scy_test_value == 'S' or scy_test_value == 'O':
                                # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
                                match_found = match_with_char(db_test_value, scy_test_value)    
                                if match_found:
                                    # print(db_test_name + ': ' + db_test_value)
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]
                            else:
                                match_found = match_with_hex(db_test_value, scy_test_value)
                                if match_found:
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]

                        elif scy_test_name == 'TI':
                            if scy_test_value == 'Z' or scy_test_value == 'RD' or scy_test_value == 'RI'  or scy_test_value == 'BI'  or scy_test_value == 'I':
                                # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
                                match_found = match_with_char(db_test_value, scy_test_value)    
                                if match_found:
                                    # print(db_test_name + ': ' + db_test_value)
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]
                            else:
                                match_found = match_with_hex(db_test_value, scy_test_value)
                                if match_found:
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]

                        elif scy_test_name == 'CI':
                            if scy_test_value == 'Z' or scy_test_value == 'RD' or scy_test_value == 'RI'  or scy_test_value == 'BI'  or scy_test_value == 'I':
                                # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
                                match_found = match_with_char(db_test_value, scy_test_value)    
                                if match_found:
                                    # print(db_test_name + ': ' + db_test_value)
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]
                            else:
                                match_found = match_with_hex(db_test_value, scy_test_value)
                                if match_found:
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]

                        elif scy_test_name == 'II':
                            if scy_test_value == 'Z' or scy_test_value == 'RD' or scy_test_value == 'RI'  or scy_test_value == 'BI'  or scy_test_value == 'I':
                                # if ('-' in db_test_value) or ('>' in db_test_value) or ('<' in db_test_value) or ('|' in db_test_value):
                                match_found = match_with_char(db_test_value, scy_test_value)    
                                if match_found:
                                    # print(db_test_name + ': ' + db_test_value)
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]
                            else:
                                match_found = match_with_hex(db_test_value, scy_test_value)
                                if match_found:
                                    value_match_len += 1
                                    match_points += match_points_dict[pattern_name][db_test_name]

                    break        
                        
        if value_match_len == len(scy_test_values):
            return True, match_points
        
        else:
            return False, match_points
        #     print(db_test_values)
        #     print(scy_test_values)

    else:
        return False, possible_matchpoints # zero matches

def get_possible_points(matchpoints_db_fp, scydes_pattern):

    possible_match_points_dict = {}
    probes_res_matchpoints_count = 0
    item = 3
    for fp_line_key, fp_line_val in scydes_pattern.items():

        match_points_count = 0

        db_matchpoint_values = matchpoints_db_fp[item].split('(')[1].strip(')').split('%')

        if fp_line_val != '':
            scy_test_values = fp_line_val.split('(')[1].strip(')').split('%')
            
            # match_points_count = 0
            for scy_test in scy_test_values:
                scy_test_name = scy_test.split('=')[0]

                for db_matchpoint in db_matchpoint_values:
                    db_test = db_matchpoint.split('=')
                    db_test_name = db_test[0]
                    db_test_matchpoint = int(db_test[1])

                    if scy_test_name == db_test_name:
                        match_points_count += db_test_matchpoint
                        break
            
            if match_points_count > 0:
                probes_res_matchpoints_count += 1
                possible_match_points_dict[fp_line_key]={}
                possible_match_points_dict[fp_line_key]=match_points_count
            else:
                possible_match_points_dict[fp_line_key]={}
                possible_match_points_dict[fp_line_key]=None
            
        else:
            for db_matchpoint in db_matchpoint_values:
                db_test = db_matchpoint.split('=')
                db_test_name = db_test[0]
                db_test_matchpoint = int(db_test[1])
                match_points_count += db_test_matchpoint
                
            possible_match_points_dict[fp_line_key] = {}
            possible_match_points_dict[fp_line_key]=match_points_count

        item += 1

        # else:
        #     for db_matchpoint in db_matchpoint_values:
        #         db_test = db_matchpoint.split('=')
        #         db_test_name = db_test[0]
        #         db_test_matchpoint = int(db_test[1])
        #         match_points_count += db_test_matchpoint
                
        #     possible_match_points_dict[fp_line_key] = {}
        #     possible_match_points_dict[fp_line_key]=match_points_count
        #     item += 1

    return possible_match_points_dict, probes_res_matchpoints_count

def match_patterns(scydes_pattern):
    os_info = []

    os_db_patterns = read_db_patterns()

    possible_match_points, pattern_resp_counts = get_possible_points(os_db_patterns[0], scydes_pattern)

    # pattern_resp_counts = 13

    top_3_guesses = [
            {'confidence': 0.0, 'fingerprint':'', 'cpe':'', 'class':''},
            {'confidence': 0.0, 'fingerprint':'', 'cpe':'', 'class':''},
            {'confidence': 0.0, 'fingerprint':'', 'cpe':'', 'class':''},
    ]

    for i in range(1, len(os_db_patterns)):

        db_seq = (os_db_patterns[i][3])
        scydes_seq = scydes_pattern['SEQ']

        db_ops = (os_db_patterns[i][4])
        scydes_ops = scydes_pattern['OPS']

        db_win = (os_db_patterns[i][5])
        scydes_win = scydes_pattern['WIN']

        db_ecn = (os_db_patterns[i][6])
        scydes_ecn = scydes_pattern['ECN']

        db_t1 = (os_db_patterns[i][7])
        scydes_t1 = scydes_pattern['T1']

        db_t2 = (os_db_patterns[i][8])
        scydes_t2 = scydes_pattern['T2']

        db_t3 = (os_db_patterns[i][9])
        scydes_t3 = scydes_pattern['T3']

        db_t4 = (os_db_patterns[i][10])
        scydes_t4 = scydes_pattern['T4']

        db_t5 = (os_db_patterns[i][11])
        scydes_t5 = scydes_pattern['T5']

        db_t6 = (os_db_patterns[i][12])
        scydes_t6 = scydes_pattern['T6']

        db_t7 = (os_db_patterns[i][13])
        scydes_t7 = scydes_pattern['T7']

        db_u1 = (os_db_patterns[i][14])
        scydes_u1 = scydes_pattern['U1']

        db_ie = (os_db_patterns[i][15])
        scydes_ie = scydes_pattern['IE']
        
        if os_db_patterns[i][0] == 'Fingerprint VMware ESXi 5.0' or \
            os_db_patterns[i][0] == 'Fingerprint AVtech Room Alert 26W environmental monitor':
            print(db_seq)
            print(db_ops)
            print(db_win)
            print(db_ecn)
            print(db_t1)
            print(db_t2)
            print(db_t3)
            print(db_t4)
            print(db_t5)
            print(db_t6)
            print(db_t7)
            print(db_ie)
            print(db_u1)
            print("stop")
        # if db_ops == 'OPS(O1=M5B4ST11NW2%O2=M5B4ST11NW2%O3=M5B4NNT11NW2%O4=M5B4ST11NW2%O5=M5B4ST11NW2%O6=M5B4ST11)' \
        #     and db_win == 'WIN(W1=3890%W2=3890%W3=3890%W4=3890%W5=3890%W6=3890)':
        
            
        #     print('----------------------------')
        #     print(os_db_patterns[i][1])
        #     print('----------------------------')
        #     seq_match = test_match(db_seq, scydes_seq)
        #     print(db_seq)
        #     print(scydes_seq)
        #     print("----------------------------")
        #     ops_match = test_match(db_ops, scydes_ops)
        #     print(db_ops)
        #     print(scydes_ops)
        #     print("----------------------------")
        #     win_match = test_match(db_win, scydes_win)
        #     print(db_win)
        #     print(scydes_win)
        #     print("----------------------------")
        #     ecn_match = test_match(db_ecn, scydes_ecn)
        #     print(db_ecn)
        #     print(scydes_ecn)
        #     print("----------------------------")
        #     t1_match = test_match(db_t1, scydes_t1)
        #     print(db_t1)
        #     print(scydes_t1)
        #     print("----------------------------")
        #     t2_match = test_match(db_t2, scydes_t2)
        #     print(db_t2)
        #     print(scydes_t2)
        #     print("----------------------------")
        #     t3_match = test_match(db_t3, scydes_t3)
        #     print(db_t3)
        #     print(scydes_t3)
        #     print("----------------------------")
        #     t4_match = test_match(db_t4, scydes_t4)
        #     print(db_t4)
        #     print(scydes_t4)
        #     print("----------------------------")
        #     t5_match = test_match(db_t5, scydes_t5)
        #     print(db_t5)
        #     print(scydes_t5)
        #     print("----------------------------")
        #     t6_match = test_match(db_t6, scydes_t6)
        #     print(db_t6)
        #     print(scydes_t6)
        #     print("----------------------------")
        #     t7_match = test_match(db_t7, scydes_t7)
        #     print(db_t7)
        #     print(scydes_t7)
        #     print("----------------------------")
        #     u1_match = test_match(db_u1, scydes_u1)
        #     print(db_u1)
        #     print(scydes_u1)
        #     print("----------------------------")
        #     ie_match = test_match(db_ie, scydes_ie)
        #     print(db_ie)
        #     print(scydes_ie)
        #     print("----------------------------\n\n\n")

        #     if seq_match and ops_match and win_match \
        #         and ecn_match and t1_match and t2_match \
        #         and t3_match and t4_match and t5_match \
        #         and t6_match and t7_match and u1_match and ie_match:

        #         print(os_db_patterns[i][0])
        #         print(os_db_patterns[i][1])
        #         print(os_db_patterns[i][2])


        # seq_match = test_match(db_seq, scydes_seq)

        # ops_match = test_match(db_ops, scydes_ops)

        # win_match = test_match(db_win, scydes_win)

        # ecn_match = test_match(db_ecn, scydes_ecn)

        # t1_match = test_match(db_t1, scydes_t1)

        # t2_match = test_match(db_t2, scydes_t2)

        # t3_match = test_match(db_t3, scydes_t3)

        # t4_match = test_match(db_t4, scydes_t4)

        # t5_match = test_match(db_t5, scydes_t5)

        # t6_match = test_match(db_t6, scydes_t6)

        # t7_match = test_match(db_t7, scydes_t7)

        # u1_match = test_match(db_u1, scydes_u1)

        # ie_match = test_match(db_ie, scydes_ie)


        # if seq_match and ops_match and win_match \
        #     and ecn_match and t1_match and t2_match \
        #     and t3_match and t4_match and t5_match \
        #     and t6_match and t7_match and u1_match and ie_match:

        #     print(os_db_patterns[i][0])
        #     print(os_db_patterns[i][1])
        #     print(os_db_patterns[i][2])

        # if os_db_patterns[i][0] == 'Fingerprint AVtech Room Alert 26W environmental monitor':
        #     print("asd")

        
            
        seq_match, seq_match_points = test_match(db_seq, scydes_seq, possible_match_points['SEQ'], 'SEQ')

        ops_match, ops_match_points = test_match(db_ops, scydes_ops, possible_match_points['OPS'], 'OPS')

        win_match, win_match_points = test_match(db_win, scydes_win, possible_match_points['WIN'], 'WIN')

        ecn_match, ecn_match_points = test_match(db_ecn, scydes_ecn, possible_match_points['ECN'], 'ECN')

        t1_match, t1_match_points = test_match(db_t1, scydes_t1, possible_match_points['T1'], 'T1')

        t2_match, t2_match_points = test_match(db_t2, scydes_t2, possible_match_points['T2'], 'T2')

        t3_match, t3_match_points= test_match(db_t3, scydes_t3, possible_match_points['T3'], 'T3')

        t4_match, t4_match_points= test_match(db_t4, scydes_t4, possible_match_points['T4'], 'T4')

        # if scydes_t5 != '':
        t5_match, t5_match_points = test_match(db_t5, scydes_t5, possible_match_points['T5'], 'T5')
        # else:
        #     t5_match = False
        #     t5_match_points = possible_match_points['T5']

        # if scydes_t6 != '':
        t6_match, t6_match_points = test_match(db_t6, scydes_t6, possible_match_points['T6'], 'T6')
        # else:
        #     t6_match = False
        #     t6_match_points = possible_match_points['T6']
        
        # if scydes_t7 != '':
        t7_match, t7_match_points = test_match(db_t7, scydes_t7, possible_match_points['T7'], 'T7')
        # else:
        #     t7_match = False
        #     t7_match_points = possible_match_points['T7']

        u1_match, u1_match_points = test_match(db_u1, scydes_u1, possible_match_points['U1'], 'U1')

        ie_match, ie_match_points = test_match(db_ie, scydes_ie, possible_match_points['IE'], 'IE')

        match_points_dict = dict(SEQ=seq_match_points, OPS=ops_match_points, WIN=win_match_points,
                                ECN=ecn_match_points, T1=t1_match_points, T2=t2_match_points,
                                T3=t3_match_points, T4=t4_match_points, T5=t5_match_points,
                                T6=t6_match_points, T7=t7_match_points, U1=u1_match_points, IE=ie_match_points)

        # confidence_factor = 0
        
        match_points_dict_length = len(match_points_dict)
        factor = 0
        for points in match_points_dict:
            # print(points)
            # if match_points_dict[points]:
            try:
                factor += match_points_dict[points]/possible_match_points[points]
            except:
                factor += 0

        if (factor/match_points_dict_length) == 1:
            confidence_factor = 1
            # print(os_db_patterns[i][0])
            # print(os_db_patterns[i][1])
            # print(os_db_patterns[i][2])

            os_name = ''
            try:
                os_name = os_db_patterns[i][1].split('|')[1].strip()
            except:
                os_name = os_db_patterns[i][1]

            fingerprint = os_db_patterns[i][0].replace('Fingerprint ', '').strip().split(',')
            # clas = os_db_patterns[i][1].replace('Class', '').strip()
            # cpe = os_db_patterns[i][2].replace('CPE', '').strip()

            # fingerprint = os_db_patterns[i][0].split('Fingerprint ')
            # fingerprint = [x for x in fingerprint if x != '']

            clas = os_db_patterns[i][1].split('Class ')
            clas = [x for x in clas if x != '']

            cpe = os_db_patterns[i][2].split('CPE ')
            cpe = [x for x in cpe if x != '']

            tempDict = dict(os_name=os_name, confidence=confidence_factor, fingerprint=fingerprint, clas=clas, cpe=cpe)

            os_info.append(tempDict)

        else:
            conf_factor = factor/match_points_dict_length

            if top_3_guesses[0]['confidence'] < conf_factor:

                top_3_guesses[0]['confidence'] = conf_factor
                top_3_guesses[0]['fingerprint'] = os_db_patterns[i][0]
                top_3_guesses[0]['class'] = os_db_patterns[i][1]
                top_3_guesses[0]['cpe'] = os_db_patterns[i][2]
            
            elif top_3_guesses[1]['confidence'] < conf_factor:

                top_3_guesses[1]['confidence'] = conf_factor
                top_3_guesses[1]['fingerprint'] = os_db_patterns[i][0]
                top_3_guesses[1]['class'] = os_db_patterns[i][1]
                top_3_guesses[1]['cpe'] = os_db_patterns[i][2]
            
            elif top_3_guesses[2]['confidence'] < conf_factor:

                top_3_guesses[2]['confidence'] = conf_factor
                top_3_guesses[2]['fingerprint'] = os_db_patterns[i][0]
                top_3_guesses[2]['class'] = os_db_patterns[i][1]
                top_3_guesses[2]['cpe'] = os_db_patterns[i][2]
            
    # print(top_3_guesses)
    for x in top_3_guesses:
        # print('[*]' + str(round(x['confidence'] * 100 )))
        # print(x['fingerprint'])
        # print(x['cpe'])
        # print(x['class'])
        # print('\n')
        os_name = ''
        try:
            os_name = x['class'].split('|')[1].strip()
        except:
            os_name = x['class']
        
        fingerprint = x['fingerprint'].replace('Fingerprint ', '').strip().split(',')
        # clas = x['class'].replace('Class', '').strip()
        # cpe = x['cpe'].replace('CPE', '').strip()

        # fingerprint = x['fingerprint'].split('Fingerprint ')  #.replace('Fingerprint', '').strip()
        # fingerprint = [x for x in fingerprint if x != '']
        clas = x['class'].split('Class ')   #.replace('Class', '').strip()
        clas = [x for x in clas if x != '']
        cpe = x['cpe'].split('CPE ')  #.replace('CPE', '').strip()
        cpe = [x for x in cpe if x != '']

        tempDict = dict(os_name=os_name, confidence=round(x['confidence']*100), fingerprint=fingerprint, cpe=cpe, clas=clas)
        os_info.append(tempDict)

    return os_info
        # print(possible_match_points)

        # if seq_match and ops_match and win_match \
        #     and ecn_match and t1_match and t2_match \
        #     and t3_match and t4_match and t5_match \
        #     and t6_match and t7_match and u1_match and ie_match:

        #     print(os_db_patterns[i][0])
        #     print(os_db_patterns[i][1])
        #     print(os_db_patterns[i][2])


    # print(count1)
    # print(count2)
    # print(count3)
    # print(count4)
    # print(count5)
    # print(count6)
    # print(count7)
    # print(count8)
    # print(count9)
    # print(count10)
if __name__=='__main__':
    
    # # Home Router signature
    # seq_pattern = 'SEQ(SP=CE%GCD=1%ISR=CF%TI=Z%CI=Z%II=I%TS=A)'
    # ops_pattern = 'OPS(O1=M5B4ST11NW1%O2=M5B4ST11NW1%O3=M5B4NNT11NW1%O4=M5B4ST11NW1%O5=M5B4ST11NW1%O6=M5B4ST11)'
    # win_pattern = 'WIN(W1=16A0%W2=16A0%W3=16A0%W4=16A0%W5=16A0%W6=16A0)'
    # ecn_pattern = 'ECN(R=Y%DF=Y%T=40%W=16D0%O=M5B4NNSNW1%CC=N%Q=)'
    # t1_pattern = 'T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)'
    # t2_pattern = 'T2(R=N)'
    # t3_pattern = 'T3(R=Y%DF=Y%T=40%W=16A0%S=O%A=S+%F=AS%O=M5B4ST11NW1%RD=0%Q=)'
    # t4_pattern = 'T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)'
    # t5_pattern = 'T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)'
    # t6_pattern = 'T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)'
    # t7_pattern = 'T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)'
    # u1_pattern = 'U1(DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)'
    # ie_pattern = 'IE(DFI=N%T=40%CD=S)'

    # # Windows 7 signature
    # seq_pattern = 'SEQ(SP=7E%GCD=1%ISR=92%TI=I%II=I%SS=S%TS=7)'
    # ops_pattern = 'OPS(O1=M5B4NW8ST11%O2=M5B4NW8ST11%O3=M5B4NW8NNT11%O4=M5B4NW8ST11%O5=M5B4NW8ST11%O6=M5B4ST11)'
    # win_pattern = 'WIN(W1=2000%W2=2000%W3=2000%W4=2000%W5=2000%W6=2000)'
    # ecn_pattern = 'ECN(R=Y%DF=Y%TG=80%W=2000%O=M5B4NW8NNS%CC=N%Q=)'
    # t1_pattern = 'T1(R=Y%DF=Y%TG=80%S=O%A=S+%F=AS%RD=0%Q=)'
    # t2_pattern = 'T2(R=N)'
    # t3_pattern = 'T3(R=N)'
    # t4_pattern = 'T4(R=N)'
    # t5_pattern = 'T5(R=N)'
    # t6_pattern = 'T6(R=N)'
    # t7_pattern = 'T7(R=N)'
    # u1_pattern = 'U1(R=N)'
    # ie_pattern = 'IE(DFI=N%TG=80%CD=Z)'

    # # metasploitable signature
    seq_pattern = 'SEQ(SP=A2%GCD=1%ISR=BE%TI=Z%CI=Z%II=I%TS=7)'
    ops_pattern = 'OPS(O1=M5B4ST11NW6%O2=M5B4ST11NW6%O3=M5B4NNT11NW6%O4=M5B4ST11NW6%O5=M5B4ST11NW6%O6=M5B4ST11)'
    win_pattern = 'WIN(W1=16A0%W2=16A0%W3=16A0%W4=16A0%W5=16A0%W6=16A0)'
    ecn_pattern = 'ECN(R=Y%DF=Y%T=40%W=16D0%O=M5B4NNSNW6%CC=N%Q=)'
    t1_pattern = 'T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)'
    t2_pattern = 'T2(R=N)'
    t3_pattern = 'T3(R=Y%DF=Y%T=40%W=16A0%S=O%A=S+%F=AS%O=M5B4ST11NW6%RD=0%Q=)'
    t4_pattern = 'T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)'
    t5_pattern = 'T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)'
    t6_pattern = 'T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)'
    t7_pattern = 'T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)'
    u1_pattern = 'U1(DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)'
    ie_pattern = 'IE(DFI=N%T=40%CD=S)'


    



    pattern_dict = dict(SEQ=seq_pattern,
                        OPS=ops_pattern,
                        WIN=win_pattern,
                        ECN=ecn_pattern,
                        T1=t1_pattern,
                        T2=t2_pattern,
                        T3=t3_pattern,
                        T4=t4_pattern,
                        T5=t5_pattern,
                        T6=t6_pattern,
                        T7=t7_pattern,
                        U1=u1_pattern,
                        IE=ie_pattern
                        ) 
    match_patterns(pattern_dict)