from scapy.all import *
from scapy.all import IP, TCP, ICMP, UDP
import time
import random
from . import os_detection_patterns
from . import os_pattern_matching
from . import smb_os_discovery

# import os_detection_patterns
# import os_pattern_matching
# import smb_os_discovery

from datetime import datetime

time_out = 2
def SEQ_OPS_WIN_T1(target, open_port):
    
    p1_p6_probe_list = []

    p1 =  IP(dst=target)/TCP(dport=open_port,
                            sport=12345,
                            window=1,
                            flags='S',
                            options=[
                                ('WScale', 10), 
                                ('NOP', None),
                                ('MSS', 1460),
                                ('Timestamp', (0xFFFFFFFF, 0)),
                                ('SAckOK', b'')
                                ],
                            )
    p1['TCP'].seq = random.randint(0,pow(2,32))
    p1['TCP'].ack = random.randint(0,pow(2,1))

    p2 = IP(dst=target)/TCP(dport=open_port,
                                    sport=12346,
                                    window = 63,
                                    flags='S',
                                    options=[
                                        ('MSS', 1400),
                                        ('WScale', 0), 
                                        ('SAckOK', b''),
                                        ('Timestamp', (0xFFFFFFFF, 0)),
                                        ('EOL', None),
                                        ])
    p2['TCP'].seq = random.randint(0,pow(2,32))
    p2['TCP'].ack = random.randint(0,pow(2,1))

    p3 = IP(dst=target)/TCP(dport=open_port,
                                    sport=12347,
                                    window = 4,
                                    flags='S',
                                    options=[
                                        ('Timestamp', (0xFFFFFFFF, 0)),
                                        ('NOP', None),
                                        ('NOP', None),
                                        ('WScale', 5), 
                                        ('NOP', None),
                                        ('MSS', 640),
                                        ])
    p3['TCP'].seq = random.randint(0,pow(2,32))
    p3['TCP'].ack = random.randint(0,pow(2,1))

    p4 = IP(dst=target)/TCP(dport=open_port,
                                    sport=12348,
                                    window = 4,
                                    flags='S',
                                    options=[
                                        ('SAckOK', b''),
                                        ('Timestamp', (0xFFFFFFFF, 0)),
                                        ('WScale', 10), 
                                        ('EOL', None),                                    
                                        ])
    p4['TCP'].seq = random.randint(0,pow(2,32))
    p4['TCP'].ack = random.randint(0,pow(2,1))

    p5 = IP(dst=target)/TCP(dport=open_port,
                                    sport=12349,
                                    window = 16,
                                    flags='S',
                                    options=[
                                        ('MSS', 536),
                                        ('SAckOK', b''),
                                        ('Timestamp', (0xFFFFFFFF, 0)),
                                        ('WScale', 10), 
                                        ('EOL', None),                      
                                        ])
    p5['TCP'].seq = random.randint(0,pow(2,32))
    p5['TCP'].ack = random.randint(0,pow(2,1))

    p6 = IP(dst=target)/TCP(dport=open_port,
                                    sport=12350,
                                    window = 512,
                                    flags='S',
                                    options=[
                                        ('MSS', 265),
                                        ('SAckOK', b''),
                                        ('Timestamp', (0xFFFFFFFF, 0)),                      
                                        ])
    p6['TCP'].seq = random.randint(0,pow(2,32))
    p6['TCP'].ack = random.randint(0,pow(2,1))


    p1_p6_probe_list.append(p1)
    p1_p6_probe_list.append(p2)
    p1_p6_probe_list.append(p3)
    p1_p6_probe_list.append(p4)
    p1_p6_probe_list.append(p5)
    p1_p6_probe_list.append(p6)

    return p1_p6_probe_list

def create_icmp_echo(target):

    ie_probes_list = []
    
    payload = '\x00' * 120
    p1 = IP(dst=target)/ICMP()/payload

    p1['IP'].tos = 0
    p1['IP'].flags = 0b010  # set IP DF
    p1_ip_id = random.randint(0,65536)
    p1['IP'].id = p1_ip_id
    p1['ICMP'].code = 9
    p1['ICMP'].seq = 295
    p1_icmp_id = random.randint(0,65536)
    p1['ICMP'].id = p1_icmp_id
    
    ###############################################

    payload = '\x00' * 150
    p2 = IP(dst=target)/ICMP()/payload

    p2['IP'].tos = 4
    p2['IP'].flags = 0b010  # set IP DF
    p2['IP'].id = p1_ip_id + 1
    p2['ICMP'].code = 0
    p2['ICMP'].seq = 296
    p2['ICMP'].id = p1_icmp_id + 1

    ie_probes_list.append(p1)
    ie_probes_list.append(p2)
    
    return ie_probes_list

def create_ecn(target, open_port):

    p1 = IP(dst=target)/TCP(dport=open_port,
                                    window = 3,
                                    flags=0b011000010,
                                    options=[
                                    ('WScale', 10),
                                    ('NOP', None),
                                    ('MSS', 1460),
                                    ('SAckOK', b''),
                                    ('NOP', None),
                                    ('NOP', None),                                                        
                                    ])

    p1['TCP'].urgptr = 0xF7F5
    p1['TCP'].ack = 0
    p1['TCP'].seq = random.randint(0,2^32)
    p1['TCP'].reserved = 0b001

    return p1

def create_tcp_t2_t7(target, open_port, closed_port):
    
    t2_t7_probes_list = []

    # Send to open port
    t2 = IP(dst=target)/TCP(dport=open_port,
                                    window = 128,
                                    flags='',
                                    options=[
                                    ('WScale', 10),
                                    ('NOP', None),
                                    ('MSS', 265),
                                    ('Timestamp', (0xFFFFFFFF, 0)),
                                    ('SAckOK', b''),                                                          
                                    ])
    t2['IP'].flags = 0b010  # set IP DF
    t2['TCP'].seq = random.randrange(1,pow(2,32))
    t2['TCP'].ack = random.randrange(1,pow(2,1))    # TCP ack number is 32-bit but for some reasons and for some targets it was not working thus I changes it to 5

    
    # Send to open port
    t3 = IP(dst=target)/TCP(dport=open_port,
                                    window = 256,
                                    flags='SFUP',
                                    options=[
                                    ('WScale', 10),
                                    ('NOP', None),
                                    ('MSS', 265),
                                    ('Timestamp', (0xFFFFFFFF, 0)),
                                    ('SAckOK', b''),                                                          
                                    ])
    # t3['IP'].flags = 0b000  # unset IP DF
    t3['TCP'].seq = random.randrange(1,pow(2,32))
    t3['TCP'].ack = random.randrange(1,pow(2,1))

    # Send to open port
    t4 = IP(dst=target)/TCP(dport=open_port,
                                    window = 1024,
                                    flags='A',
                                    options=[
                                    ('WScale', 10),
                                    ('NOP', None),
                                    ('MSS', 265),
                                    ('Timestamp', (0xFFFFFFFF, 0)),
                                    ('SAckOK', b''),                                                          
                                    ])
    t4['IP'].flags = 0b010  # set IP DF
    t4['TCP'].seq = random.randrange(1,pow(2,32))
    t4['TCP'].ack = random.randrange(1,pow(2,1))

    # Send to closed port
    t5 = IP(dst=target)/TCP(dport=closed_port,
                                    window = 31337,
                                    flags='S',
                                    options=[
                                    ('WScale', 10),
                                    ('NOP', None),
                                    ('MSS', 265),
                                    ('Timestamp', (0xFFFFFFFF, 0)),
                                    ('SAckOK', b''),                                                          
                                    ])
    t5['TCP'].seq = random.randrange(1,pow(2,32))
    t5['TCP'].ack = random.randrange(1,pow(2,1))

    # Send to closed port
    t6 = IP(dst=target)/TCP(dport=closed_port,
                                    window = 32768,
                                    flags='A',
                                    options=[
                                    ('WScale', 10),
                                    ('NOP', None),
                                    ('MSS', 265),
                                    ('Timestamp', (0xFFFFFFFF, 0)),
                                    ('SAckOK', b''),                                                          
                                    ])
    t6['IP'].flags = 0b010  # set IP DF
    t6['TCP'].seq = random.randrange(1,pow(2,32))
    t6['TCP'].ack = random.randrange(1,pow(2,1))

    # Send to closed port
    t7 = IP(dst=target)/TCP(dport=closed_port,
                                    window = 65535,
                                    flags='FPU',
                                    options=[
                                    ('WScale', 15),
                                    ('NOP', None),
                                    ('MSS', 265),
                                    ('Timestamp', (0xFFFFFFFF, 0)),
                                    ('SAckOK', b''),                                                          
                                    ])
    # t7['IP'].flags = 0b000  # unset IP DF
    t7['TCP'].seq = random.randrange(1,pow(2,32))
    t7['TCP'].ack = random.randrange(1,pow(2,1))

    t2_t7_probes_list.append(t2)
    t2_t7_probes_list.append(t3)
    t2_t7_probes_list.append(t4)
    t2_t7_probes_list.append(t5)
    t2_t7_probes_list.append(t6)
    t2_t7_probes_list.append(t7)

    return t2_t7_probes_list


def create_udp(target, closed_port):

    #send to a closed port
    payload = b'C' * 300
    p1 = IP(dst=target)/UDP()/payload

    p1['IP'].id = 0x1042
    p1['UDP'].dport = closed_port

    p1 = IP(p1.build())

    return p1

def SEQ_OPS_WIN_T1_response(p1_p6_probe_list, p1_p6_res_list, ie_res_list, u1, u1_res, t2_t7_res_list, time_stamps_diff):


    seq = os_detection_patterns.get_sec(p1_p6_res_list, ie_res_list, t2_t7_res_list, time_stamps_diff)
    ops = os_detection_patterns.get_ops(p1_p6_res_list)
    win = os_detection_patterns.get_win(p1_p6_res_list)
    t1 = os_detection_patterns.get_t1(p1_p6_probe_list[0], p1_p6_res_list[0], u1, u1_res)
    
    return seq, ops, win, t1

def icmp_echo_response(ie_probes_list, ie_res_list, u1, u1_res):

    ie = os_detection_patterns.get_ie(ie_probes_list[0], ie_res_list[0], ie_probes_list[1], ie_res_list[1], u1, u1_res)

    return ie

def ecn_response(ecn, ecn_res, u1, u1_res):
    
    ecn = os_detection_patterns.get_ecn(ecn, ecn_res, u1, u1_res)

    return ecn

   
    

def tcp_t2_t7_response(t2_t7_probes_list, t2_t7_res_list, u1, u1_res):
    
    t2_pattern = 'T2(' + os_detection_patterns.get_t2_t7(t2_t7_probes_list[0], t2_t7_res_list[0], u1, u1_res) + ')'
    t3_pattern = 'T3(' + os_detection_patterns.get_t2_t7(t2_t7_probes_list[1], t2_t7_res_list[1], u1, u1_res) + ')'
    t4_pattern = 'T4(' + os_detection_patterns.get_t2_t7(t2_t7_probes_list[2], t2_t7_res_list[2], u1, u1_res) + ')'
    t5_pattern = 'T5(' + os_detection_patterns.get_t2_t7(t2_t7_probes_list[3], t2_t7_res_list[3], u1, u1_res) + ')'
    t6_pattern = 'T6(' + os_detection_patterns.get_t2_t7(t2_t7_probes_list[4], t2_t7_res_list[4], u1, u1_res) + ')'
    t7_pattern = 'T7(' + os_detection_patterns.get_t2_t7(t2_t7_probes_list[5], t2_t7_res_list[5], u1, u1_res) + ')'

    return t2_pattern, t3_pattern, t4_pattern, t5_pattern, t6_pattern, t7_pattern


def udp_response(u1_probe, u1_res):


    u1 = os_detection_patterns.get_u1(u1_probe, u1_res)
    
    return u1

def find_time_stamps_diff(time_stamps):

    time_stamps_diff = []
    for i in range(0, len(time_stamps) - 1):
        x = time_stamps[i+1] - time_stamps[i]
        x = x.microseconds
        time_stamps_diff.append(x)
        
    return time_stamps_diff

def os_detect(target, open_port, closed_port, port_flag):

    new_line_re = r'[\n]{2,}'

    try_count = 3

    os_try = 0

    p1_p6_res_list = []

    ie_res_list = []

    t2_t7_res_list = []

    time_stamps = []

    p1_p6_probe_list = SEQ_OPS_WIN_T1(target, open_port)         #4 tests

    ie_probes_list = create_icmp_echo(target)         #1 test

    ecn = create_ecn(target, open_port)                          #1 test

    t2_t7_probes_list = create_tcp_t2_t7(target, open_port, closed_port)      #6 tests

    u1 = create_udp(target, closed_port)                           #1 test

    while os_try < try_count:

        os_try += 1

        # Send Packets
        time_stamps.append(datetime.now())
        p1_res = sr1(p1_p6_probe_list[0], verbose=0, timeout=time_out)
        time.sleep(100/1000)    # sleep for 100 miliseconds

        time_stamps.append(datetime.now())
        p2_res = sr1(p1_p6_probe_list[1], verbose=0, timeout=time_out)
        time.sleep(100/1000)    # sleep for 100 miliseconds

        time_stamps.append(datetime.now())
        p3_res = sr1(p1_p6_probe_list[2], verbose=0, timeout=time_out)
        time.sleep(100/1000)    # sleep for 100 miliseconds

        time_stamps.append(datetime.now())
        p4_res = sr1(p1_p6_probe_list[3], verbose=0, timeout=time_out)
        time.sleep(100/1000)    # sleep for 100 miliseconds

        time_stamps.append(datetime.now())
        p5_res = sr1(p1_p6_probe_list[4], verbose=0, timeout=time_out)
        time.sleep(100/1000)    # sleep for 100 miliseconds

        time_stamps.append(datetime.now())
        p6_res = sr1(p1_p6_probe_list[5], verbose=0, timeout=time_out)

        
        time_stamps.append(datetime.now())
        ie1_res = sr1(ie_probes_list[0], verbose=0, timeout=time_out)
        
        time_stamps.append(datetime.now())
        ie2_res = sr1(ie_probes_list[1], verbose=0, timeout=time_out)

        
        time_stamps.append(datetime.now())
        ecn_res = sr1(ecn, verbose=0, timeout=time_out)
        
        time_stamps.append(datetime.now())
        t2_res = sr1(t2_t7_probes_list[0], verbose=0, timeout=time_out)

        time_stamps.append(datetime.now())
        t3_res = sr1(t2_t7_probes_list[1], verbose=0, timeout=time_out)
        
        time_stamps.append(datetime.now())
        t4_res = sr1(t2_t7_probes_list[2], verbose=0, timeout=time_out)
        
        time_stamps.append(datetime.now())
        t5_res = sr1(t2_t7_probes_list[3], verbose=0, timeout=time_out)
        
        time_stamps.append(datetime.now())
        t6_res = sr1(t2_t7_probes_list[4], verbose=0, timeout=time_out)
        
        time_stamps.append(datetime.now())
        t7_res = sr1(t2_t7_probes_list[5], verbose=0, timeout=time_out)
        

        time_stamps.append(datetime.now())
        u1_res = sr1(u1, verbose=0, timeout=time_out)

        if p1_res and p2_res and p3_res and p4_res and p5_res and p6_res:
            
            break
    
    if p1_res and p2_res and p3_res and p4_res and p5_res and p6_res:
        # if p1_res:
        p1_p6_res_list.append(p1_res)
        # if p2_res:
        p1_p6_res_list.append(p2_res)
        # if p3_res:
        p1_p6_res_list.append(p3_res)
        # if p4_res:
        p1_p6_res_list.append(p4_res)
        # if p5_res:
        p1_p6_res_list.append(p5_res)
        # if p6_res:
        p1_p6_res_list.append(p6_res)

        # if ie1_res:
        ie_res_list.append(ie1_res)
        # if ie2_res:
        ie_res_list.append(ie2_res)

        # if t2_res:
        t2_t7_res_list.append(t2_res)
        # if t3_res:
        t2_t7_res_list.append(t3_res)
        # if t4_res:
        t2_t7_res_list.append(t4_res)
        # if t5_res:
        t2_t7_res_list.append(t5_res)
        # if t6_res:
        t2_t7_res_list.append(t6_res)
        # if t7_res:
        t2_t7_res_list.append(t7_res)


        time_stamps_diff = find_time_stamps_diff(time_stamps)
        
        try:
            # Analyze Responses
            seq_pattern, ops_pattern, win_pattern, t1_pattern = SEQ_OPS_WIN_T1_response(p1_p6_probe_list, p1_p6_res_list, ie_res_list, u1, u1_res, t2_t7_res_list, time_stamps_diff)
            
            ie_pattern =icmp_echo_response(ie_probes_list, ie_res_list, u1, u1_res)

            ecn_pattern = ecn_response(ecn, ecn_res, u1, u1_res)

            t2_pattern, t3_pattern, t4_pattern, t5_pattern, t6_pattern, t7_pattern = tcp_t2_t7_response(t2_t7_probes_list, t2_t7_res_list, u1, u1_res)
            if port_flag == 'filtered':
                if t5_pattern == 'T5(R=N)':
                    t5_pattern = ''
                if t6_pattern == 'T6(R=N)':
                    t6_pattern = ''
                if t7_pattern == 'T7(R=N)':
                    t7_pattern = ''


            u1_pattern = udp_response(u1, u1_res)

            # pattern = seq_pattern + '\n' + \
            #         ops_pattern + '\n' + \
            #         win_pattern + '\n' + \
            #         ecn_pattern + '\n' + \
            #         t1_pattern + '\n' + \
            #         t2_pattern + '\n' + \
            #         t3_pattern + '\n' + \
            #         t4_pattern + '\n' + \
            #         t5_pattern + '\n' + \
            #         t6_pattern + '\n' + \
            #         t7_pattern + '\n' + \
            #         u1_pattern + '\n' + \
            #         ie_pattern
            # print(pattern)        
            # pattern = re.sub(new_line_re, '\n', pattern)

            pattern_dict = dict(SEQ=seq_pattern,
                                OPS=ops_pattern,
                                WIN=win_pattern,
                                ECN=ecn_pattern,
                                T1=t1_pattern,
                                T2=t2_pattern,
                                T3=t3_pattern,
                                T4=t4_pattern,
                                T5=t5_pattern,
                                T6=t6_pattern,
                                T7=t7_pattern,
                                U1=u1_pattern,
                                IE=ie_pattern
                                )
            
            if pattern_dict:
                os_info = os_pattern_matching.match_patterns(pattern_dict)
                return os_info
        
        except:
            os_info = [dict(os_name='Unknown', company='Unknown', confidence='None', fingerprint=['None'], cpe=['None'], clas=['None'])]
            return os_info

def nmap_os_discovery(info_gather, ports_dict):

    target = ports_dict['target']
    ports = ports_dict['ports']
    
    open_port = None
    closed_port = None
    filtered_port = None

    port_flag = ''

    try:
        for port in ports:

            if port['status'] == 'open':
                open_port = port['port']

            elif port['status'] == 'closed':
                closed_port = port['port']
            
            elif port['status'] == 'filtered':
                filtered_port = port['port']

            if open_port and closed_port:
                break
        

        os_info = None
        if open_port and closed_port:
            port_flag = 'closed'
            os_info = os_detect(target, open_port, closed_port, port_flag)

        
        elif (not closed_port) and open_port and filtered_port: # no closed port found
            port_flag = 'filtered'
            os_info = os_detect(target, open_port, filtered_port, port_flag)
         

        if not os_info:
            os_info=[{'os_name':'Unknown', 'company':'Unknown', 'confidence':'None', 'fingerprint':['None'], 'clas':['None'], 'cpe':['None']}]

    except Exception as e:
        print("[*] OS Detection", e)

    return os_info

def smb_os_detection(ports_dict):

    # Check if port 139 or 445 is open for smb os discovery
    
    for port in ports_dict['ports']:
        port_number = port['port']
        if (port_number == 139 or port_number == 445) and port['status'] == 'open':
            target = ports_dict['target']
            
            native_os =  smb_os_discovery.smb_os_detection(target, port_number)

            if not native_os == '':

                native_os = native_os.replace('Windows 5.0', 'Windows 2000').replace('Windows 5.1','Windows XP')
                os_name = native_os.split('|')[0].split(' ')[0]

                os_info=[{'os_name':os_name, 'company':'Unknown', 'confidence':'100', 'fingerprint':[native_os], 'clas':['None'], 'cpe':['None']}]


                return os_info

def pof_os_detection():
    pass

def os_detect_main(info_gather, ports_dict):
    
    target = ports_dict['target']

    module = 'OS Detection'
    sub_module = ''
    event_type = 'os_detection_started'
    info_gather.send_module_time_to_server(module, sub_module, event_type, None, None, target)


    smb_os_info = smb_os_detection(ports_dict)
    os_info = smb_os_info
    if not smb_os_info:
        nmap_os_info = nmap_os_discovery(info_gather, ports_dict)
        os_info = nmap_os_info

    os_name = os_info[0]['os_name']
    company = os_info[0]['company']

    tempDict1 = dict(target=target, os_name=os_name, company=company)

    info_gather.send_data_to_server(tempDict1, 'os_detected')

    tempDict3 = dict(target=target, os_info=os_info)
    info_gather.add_os_info_to_results(tempDict3)


    module = 'OS Detection'
    sub_module = ''
    event_type = 'os_detection_finished'
    info_gather.send_module_time_to_server(module, sub_module, event_type, None, None, target)



if __name__=='__main__':

    target = '111.68.96.33'
    open_port = 23
    closed_port = 80
    os_info = os_detect(None, target, open_port, closed_port, 'closed')

    print(os_info)