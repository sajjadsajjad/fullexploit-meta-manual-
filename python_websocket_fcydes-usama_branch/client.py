import json
import websocket  # pip install websocket-client
import _thread as thread
import threading
import information_gathering
import available_interfaces
from exploitation import exploitation_main
from reporting import reporting_main

# globals
typesDef = {
    'USER_EVENT': "user_event",
    'CONNECTION_SUCCESFUL': "connection_succesful",
    'START_SCANNING': "start_scanning",
    'TEST': "test",
    'REQ_IP_DATA': "req_ip_data",
    'REQ_IP_PORTS':'req_ip_ports',
    'START_VULNERABILITY_SCANNING':'start_vulnerability_scanning',
    'REQUEST_IP_VULNERABILITY_DETAILS': 'request_ip_vulnerability_details',
    'REQ_VULNERABILITY_DETAILS': 'req_vulnerability_details',
    'REQ_AVAILABLE_INTERFACES': 'req_available_iterfaces',

    'START_EXPLOITATION_MODULE':'start_exploitation_module',
    'START_EXPLOITATION': 'start_exploitation',
    'REQUEST_IP_EXPLOITS_DATA': 'request_ip_exploits_data',
    'OPEN_SHELL': 'open_shell',

    'REQUEST_REPORT_DATA': 'request_report_data',

}

user_id = None
info_gathering = None
exploitation = None

def on_message(ws, message):
    
    res = json.loads(message)
    if res['eventType'] == typesDef['CONNECTION_SUCCESFUL']:
        print("[*] Event: connection_successfull")
        global user_id
        user_id = res['data']['id']

    
    #-------------------------------------------------------------------------------------------------------#
    #                                        Information Gathering Events                                   #
    #-------------------------------------------------------------------------------------------------------#

    elif res['eventType'] == typesDef['REQ_AVAILABLE_INTERFACES']:
        interfaces = available_interfaces.NetworkInterfaces(user_id, ws)
        req_available_interfaces_thread = threading.Thread(target=interfaces.get_available_interfaces)
        req_available_interfaces_thread.start()
        
    
    elif res['eventType'] == typesDef['START_SCANNING']:
        print("[*] Event: start_scanning")
        global info_gathering
        info_gathering = information_gathering.InformationGathering(user_id, ws)
        info_gather_thread = threading.Thread(target=info_gathering.start_scanning, args=(res['data'],))
        info_gather_thread.start()

        global exploitation
        exploitation = exploitation_main.Exploitation(user_id, ws, info_gathering)
        


    elif res['eventType'] == typesDef['REQ_IP_DATA']:
        print("[*] Event: req_ip_data")
        ip_info_thread = threading.Thread(target=info_gathering.get_ip_info, args=(res['data']['ip'],))
        ip_info_thread.start()


    # elif res['eventType'] == typesDef['REQ_IP_PORTS']:
    #     print("[*] Event: req_ip_ports")
    #     ip_info_thread = threading.Thread(target=info_gathering.get_ports_info, args=(res['data']['ip'],))
    #     ip_info_thread.start()


    #-------------------------------------------------------------------------------------------------------#
    #                                      Vulnerability Analysis Events                                    #
    #-------------------------------------------------------------------------------------------------------#

    elif res['eventType'] == typesDef['START_VULNERABILITY_SCANNING']:
        print("[*] Event: start_vulnerability_scanning")
        ip_info_thread = threading.Thread(target=info_gathering.start_vulnerability_scanning)
        ip_info_thread.start()
        


    elif res['eventType'] == typesDef['REQUEST_IP_VULNERABILITY_DETAILS']:
        print("[*] Event: request_ip_vulnerability_details")
        ip_info_thread = threading.Thread(target=info_gathering.get_ip_vulnerabilities, args=(res['data']['ip'],))
        ip_info_thread.start()


    # elif res['eventType'] == typesDef['REQUEST_IP_PORTS_DATA']:
    #     print("[*] Event: request_ip_ports_data")
    #     ip_info_thread = threading.Thread(target=info_gathering.get_ip_ports_data, args=(res['data'],))
    #     ip_info_thread.start()


    elif res['eventType'] == typesDef['REQ_VULNERABILITY_DETAILS']:
        print("[*] Event: req_vulnerability_details")
        ip_info_thread = threading.Thread(target=info_gathering.get_vulnerability_details, args=(res['data'],))
        ip_info_thread.start()

    #-------------------------------------------------------------------------------------------------------#
    #                                          Exploitation Events                                          #
    #-------------------------------------------------------------------------------------------------------#
    
    elif res['eventType'] == typesDef['START_EXPLOITATION_MODULE']:

        connect_to_msfrpcd_thread = threading.Thread(target=exploitation.connect_to_msfrpcd)
        connect_to_msfrpcd_thread.start()

    elif res['eventType'] == typesDef['START_EXPLOITATION']:
        ips_list = res['data']
        ip_info_thread = threading.Thread(target=exploitation.start_exploitation, args=(ips_list,))
        ip_info_thread.start()
    
    elif res['eventType'] == typesDef['REQUEST_IP_EXPLOITS_DATA']:
        ip = res['data']
        ip_info_thread = threading.Thread(target=exploitation.read_ip_sessions_from_db, args=(ip,))
        ip_info_thread.start()

    elif res['eventType'] == typesDef['OPEN_SHELL']:
        session_data = res['data']
        ip_info_thread = threading.Thread(target=exploitation.interact_with_session, args=(session_data,))
        ip_info_thread.start()

    
    #-------------------------------------------------------------------------------------------------------#
    #                                          Reporting Events                                             #
    #-------------------------------------------------------------------------------------------------------#

    elif res['eventType'] == typesDef['REQUEST_REPORT_DATA']:
        session_data = res['data']
        ip_info_thread = threading.Thread(target=reporting_main.get_report_data, args=(user_id, ws, info_gathering, exploitation))
        ip_info_thread.start()
        # pass

    elif res['eventType'] == "close":
        print("thread terminating...")
        ws.close()

    else:
        pass

def on_error(ws, error):
    print(error)


def on_close(ws, close_status_code, close_msg):
    print("connection closed")


def on_open(ws):
    def run(*args):
        data = {
            "username": "osama",
            "eventType": "user_event",
            "data": {"test": "Python client"}
        }
        ws.send(json.dumps(data))
        print("connection opened")

    thread.start_new_thread(run, ())


if __name__ == "__main__":
    
    ws = websocket.WebSocketApp("ws://127.0.0.1:8855",
                                on_open=on_open,
                                on_message=on_message,
                                on_error=on_error,
                                on_close=on_close)

    # ws = websocket.WebSocketApp("ws://192.168.18.106:8855/",
    #                             on_open=on_open,
    #                             on_message=on_message,
    #                             on_error=on_error,
    #                             on_close=on_close)

    


    ws.run_forever()
