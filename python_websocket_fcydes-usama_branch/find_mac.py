import socket
import netifaces
import target_validation
import codecs
from python_arptable import get_arp_table
import os
import sqlite3
import time
import struct

from packet_headers import tcp_ip_headers
time_out = 2

def get_mac_vendor(mac_addr):
    
    mac_db_path = os.getcwd() + '/mac_prefixes.db'

    mac_vendor = None

    if os.path.exists(mac_db_path):
        conn = sqlite3.connect(mac_db_path)

        cursor = conn.cursor()

        cursor.execute('''SELECT company from mac_prefixes where mac == ?;''', (mac_addr,))

        mac_vendor = cursor.fetchone()

        conn.commit()

        conn.close()

    return mac_vendor

def parse_arp_response(arp_raw_response):
    
    arp_raw_response = (codecs.encode(arp_raw_response, 'hex'))
    ethernet_header = arp_raw_response[0:28]
    dest_mac = ethernet_header[0:12]
    source_mac = ethernet_header[12:24]
    type = ethernet_header[24:28]
    
    arp_header = arp_raw_response[28:]
    hdwr_type = arp_header[0:4]
    proto_type = arp_header[4:8]
    hdwr_addr = arp_header[8:10]
    proto_addr = arp_header[10:12]
    opcode = arp_header[12:16]
    sender_mac = arp_header[16:28]
    sender_ip = arp_header[28:36]
    target_mac = arp_header[36:48]
    target_ip = arp_header[48:38]

    return sender_mac


def find_current_iface():
    
    host_ip = target_validation.getHostIP()
    net_ifaces = netifaces.interfaces()
    current_iface = ''
    for iface in net_ifaces:
        try:
            iface_ip = netifaces.ifaddresses(iface)[netifaces.AF_INET][0]['addr']
            if host_ip == iface_ip:
                current_iface = iface
        except:
            pass
    
    return current_iface

def find_source_mac(curr_iface):
    
    source_mac = netifaces.ifaddresses(curr_iface)[netifaces.AF_LINK][0]['addr']

    return source_mac

def send_arp_request(curr_iface, arp_packet, dest_host):

    sock = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x0003))
    # sock.setblocking(0)
    sock.bind((curr_iface,socket.SOCK_RAW))
    sock.send(arp_packet)
    sock.settimeout(2)
    
    t_end = time.time() + time_out
    while True:
        current_time = time.time()
        try:
            response = sock.recvfrom(1024)

            packet_data = response[0]
            ip_addr = (codecs.encode(packet_data[28:32], 'hex').decode())
            ip_addr = int(ip_addr, 16)
            ip_addr = socket.inet_ntoa(struct.pack(">L", ip_addr))

            if ip_addr == dest_host:
                return packet_data

            if current_time > t_end:
                    return

        except socket.timeout:
            return
        
        except Exception as e:
            print(e)
            pass

    # try:
    #     res = sock.recv(2048)
    #     return res
    # except Exception as e:
    #     print(e)
    # finally:
    #     sock.close()

def get_mac_address(dest_host, selected_interface):
    
    source_mac = ''
    source_ip = ''

    # curr_iface = find_current_iface()
    curr_iface = selected_interface

    if curr_iface != '':

        # arp_table_list = get_arp_table()
        #             
        dest_mac = ''
        mac_vendor = ''
        # for x in arp_table_list:
        #     if x['IP address'] == dest_host and x['Device'] == curr_iface:
        #         dest_mac = (x['HW address'])
        #         dest_mac = dest_mac.replace(':','')
        #         dest_mac = dest_mac.upper()
        
        source_mac = find_source_mac(curr_iface)
        source_ip = target_validation.getHostIP(curr_iface)

        packet = tcp_ip_headers.Packet()
        arp_packet = packet.generateARPHeader(source_mac, source_ip, dest_host)

        res = send_arp_request(curr_iface, arp_packet, dest_host)

        if res:
            dest_mac = parse_arp_response(res)
            dest_mac = dest_mac.upper().decode()

            if dest_mac != '':

                mac_vendor = get_mac_vendor(dest_mac[0:6])

                if mac_vendor:
                    mac_vendor = mac_vendor[0]
                
                

            tempDict = dict(dest_host=dest_host, mac_addr = dest_mac, mac_vendor = mac_vendor)
            
            return tempDict

    else:
        print("No usable interface found. Exiting")
        exit()

    
    
    

if __name__=='__main__':
    get_mac_address('10.120.132.5')