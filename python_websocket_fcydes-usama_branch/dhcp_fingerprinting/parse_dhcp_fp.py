import xml.etree.ElementTree as ET
import sqlite3

def write_fingerprints_to_db(fingerprint_list):
    results_db_path = './dhcp_fp.db'

    con = sqlite3.connect(results_db_path)
    cur = con.cursor()
    
    # Create table
    try:
        cur.execute('''CREATE TABLE if not exists fingerprints (fp_id integer, name text, os_name text, os_class text, os_vendor text, os_url text, device_type text, device_vendor text, device_url text, comments text, author text, last_updated text)''')
    except Exception as e:
        print(e)
    
    cur.executemany("insert into fingerprints values (:fp_id, :name, :os_name, :os_class, :os_vendor, :os_url, :device_type, :device_vendor, :device_url, :comments, :author, :last_updated)", fingerprint_list)

    con.commit()

    con.close()

def write_fingerprint_tests_db(fp_test_list):
    results_db_path = './dhcp_fp.db'

    con = sqlite3.connect(results_db_path)
    cur = con.cursor()
    # tempDict2 = dict(fp_id=fp_id, weight=weight, matchtype=matchtype, dhcptype=dhcptype, dhcpoptions=dhcpoptions, dhcpoption55=dhcpoption55, dhcpvendorcode=dhcpvendorcode, ipttl=ipttl)
    # Create table
    try:
        cur.execute('''CREATE TABLE if not exists tests (fp_id integer, weight integer, matchtype text, dhcptype text, dhcpoptions text, dhcpoption55 text, dhcpvendorcode text, ipttl text)''')
    except Exception as e:
        print(e)
    
    cur.executemany("insert into tests values (:fp_id, :weight, :matchtype, :dhcptype, :dhcpoptions, :dhcpoption55, :dhcpvendorcode, :ipttl)", fp_test_list)

    con.commit()

    con.close()

def parseXML(xmlfile):
  
    # create element tree object
    tree = ET.parse(xmlfile)
  
    # get root element
    root = tree.getroot()
      
    # iterate news items
    fingerprints_list = []
    fp_tests_list = []
    fp_id = 0
    for fingerprints in root.findall('fingerprints'):
    
        # iterate child elements of item
        for fingerprint in fingerprints:
  
            # special checking for namespace object content:media
            if fingerprint.tag == 'fingerprint':
                fp_id += 1
                name = fingerprint.attrib['name']
                os_name = fingerprint.attrib['os_name']
                os_class = fingerprint.attrib['os_class']
                os_vendor = fingerprint.attrib['os_vendor']
                os_url = fingerprint.attrib['os_url']
                device_type = fingerprint.attrib['device_type']
                device_vendor = fingerprint.attrib['device_vendor']
                device_url = fingerprint.attrib['device_url']
                comments = fingerprint.attrib['comments']
                author = fingerprint.attrib['author']
                last_updated = fingerprint.attrib['last_updated']

                tempDict = dict(fp_id=fp_id, name=name, os_name=os_name, os_class=os_class, os_vendor=os_vendor, 
                                os_url=os_url, device_type=device_type, device_vendor=device_vendor, 
                                device_url=device_url, comments=comments, author=author, last_updated=last_updated)
                fingerprints_list.append(tempDict)


                for dhcp_tests in fingerprint:
                    if dhcp_tests.tag == 'dhcp_tests':

                        # dhcpoption55 = ''
                        # dhcpvendorcode = ''
                        # dhcpoptions = ''
                        # ipttl = ''

                        for test in dhcp_tests:
                            weight = test.attrib['weight']
                            matchtype = test.attrib['matchtype']
                            dhcptype = test.attrib['dhcptype']

                            try:
                                dhcpoption55 = test.attrib['dhcpoption55']
                            except:
                                dhcpoption55 = 'None'
                            
                            try:    
                                dhcpvendorcode = test.attrib['dhcpvendorcode']
                            except:
                                dhcpvendorcode = 'None'
                            
                            try:
                                dhcpoptions = test.attrib['dhcpoptions']
                            except:
                                dhcpoptions = 'None'
                            
                            try:        
                                ipttl = test.attrib['ipttl']
                            except:
                                ipttl = 'None'
                    
                            tempDict2 = dict(fp_id=fp_id, weight=weight, matchtype=matchtype, dhcptype=dhcptype, dhcpoptions=dhcpoptions, dhcpoption55=dhcpoption55, dhcpvendorcode=dhcpvendorcode, ipttl=ipttl)
                            fp_tests_list.append(tempDict2)


    return fingerprints_list, fp_tests_list

def main():
    
    # parse xml file
    fingerprint_list, fp_test_list = parseXML('dhcp.xml')
    write_fingerprints_to_db(fingerprint_list)
    write_fingerprint_tests_db(fp_test_list)
     
      
if __name__ == "__main__":
  
    # calling main function
    main()
