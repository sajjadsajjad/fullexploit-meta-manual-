from scapy.all import *
import sqlite3
import threading
import time

from . import dhcp_structure
from . import deauth2
# import dhcp_structure
# import deauth2

def getDHCPMessageType(value):
    res = ''

    if value == 1:
        res = "Request"
    elif value == 2:
        res = "Reply"
    else:
        res = "Unknown Message Type: " + value

    return (res)

def getDHCPOption53(value):
    res = ''

    if value == 1:
        res = "Discover"
    elif value == 2:
        res = "Offer"
    elif value == 3:
        res = "Request"
    elif value == 4:
        res = "Decline"
    elif value == 5:
        res = "ACK"
    elif value == 6:
        res = "NAK"
    elif value == 7:
        res = "Release"
    elif value == 8:
        res = "Inform"
    else:
        res = "Unknown Option Message Type: " + value

    return(res)


def getDHCPOption55(value):
    
    res = ''
    for i in range(len(value)):
        res = res + str(value[i]) + ','

    res = res.strip(',')

    return (res)

def getDHCPOption60(value):
    res = ''
    try:
        res = value.decode("utf-8", "strict")
        # get rid of any buffer garbage that is in some of the vendorcodes
        res = res.replace('\x00', '')
    except:
        res = value
    
    return (res)

def getMacAddress(value):

    # print(hex(value))
    mac_address = "%x:%x:%x:%x:%x:%x" % struct.unpack("BBBBBB",value[1:7])
    # mac_bytes = struct.unpack('BBBBBB', value[0:6])
    # mac_address = ''
    # for mac_octet in mac_bytes:
    #     mac_address += hex(mac_octet)


    return mac_address
    # mac_address = binascii.unhexlify(value)
    # return mac_address

def getDHCPOptions(options_data):
    options = ''
    host_name = ''
    option55 = ''
    message_type = ''
    vendor_class_id = ''
    mac_address = ''
    for op in options_data:
        option_name = op[0]
        try:
            option_id = dhcp_structure.DHCPOptions[option_name]
        except Exception as e:
            print(e)
        options += str(option_id) + ','

        if option_id == 53:
            message_type = op[1]
            message_type = getDHCPOption53(message_type)
        elif option_id == 55:
            option55 = op[1]
            option55 = getDHCPOption55(option55)
        elif option_id == 60:
            vendor_class_id = op[1]
            vendor_class_id = getDHCPOption60(vendor_class_id)
        elif option_id == 12:
            host_name = op[1]
            host_name = host_name.decode("utf-8", "strict")
        elif option_id == 61:
            mac_address = op[1]
            mac_address = getMacAddress(mac_address)
    options = options.strip(',')
    return options, message_type, option55, vendor_class_id, host_name, mac_address
    
def parse_dhcp_packet(packet):
    # mac_addr = (packet['BOOTP'].op[''])
    # print(mac_addr)
    # print(struct.unpack("BBBBBB",mac_addr))
    pass
def fingerprint_lookup(dhcp_options, message_type, option55, vendor_class_id):
    
    results_db_path = 'dhcp_fingerprinting/dhcp_fp.db'
    if os.path.exists(results_db_path):
        conn = sqlite3.connect(results_db_path)

        cursor = conn.cursor()

        query = "SELECT * from tests where dhcptype == '" + message_type + "';"
        cursor.execute(query)
        tests = cursor.fetchall()
        
        weight = 0
        matched_fingerprints = []
        final_fp = dict(weight=0, fingerprint='None')
        for test in tests:
            fp_id = test[0]
            weight = test[1]
            matchtype = test[2]
            dhcptype = test[3]
            
            dhcp_options_fp = test[4]
            dhcpoption55_fp = test[5]
            dhcpvendorcode_fp = test[6]
            ipttl_fp = test[7]


            if dhcpvendorcode_fp != 'None' and  dhcpvendorcode_fp == vendor_class_id:        
                query = "SELECT * from fingerprints where fp_id == '" + str(fp_id) + "';"
                cursor.execute(query)
                fingerprint = cursor.fetchall()
                tempDict = dict(weight=weight, fingerprint=fingerprint)
                matched_fingerprints.append(tempDict)

            if dhcp_options_fp != 'None' and dhcp_options_fp == dhcp_options:
                query = "SELECT * from fingerprints where fp_id == '" + str(fp_id) + "';"
                cursor.execute(query)
                fingerprint = cursor.fetchall()
                tempDict = dict(weight=weight, fingerprint=fingerprint)
                matched_fingerprints.append(tempDict)
            
            if dhcpoption55_fp != 'None' and dhcpoption55_fp == option55:
                query = "SELECT * from fingerprints where fp_id == '" + str(fp_id) + "';"
                cursor.execute(query)
                fingerprint = cursor.fetchall()
                tempDict = dict(weight=weight, fingerprint=fingerprint)
                matched_fingerprints.append(tempDict)


        for fp in matched_fingerprints:
            
            if fp['weight'] > final_fp['weight']:
                final_fp = fp
        
        return final_fp
    
    # if message_type == 'Discover':
    #     pass
    # elif message_type == 'Offer':
    #     pass
    # elif message_type == 'Request':
    #     pass
    # if message_type == 'Decline':
    #     pass
    # elif message_type == 'ACK':
    #     pass
    # elif message_type == 'NAK':
    #     pass
    # if message_type == 'Release':
    #     pass
    # elif message_type == 'Inform':
    #     pass
    # else:
    #     pass

# if value == 1:
#         res = "Discover"
#     elif value == 2:
#         res = "Offer"
#     elif value == 3:
#         res = "Request"
#     elif value == 4:
#         res = "Decline"
#     elif value == 5:
#         res = "ACK"
#     elif value == 6:
#         res = "NAK"
#     elif value == 7:
#         res = "Release"
#     elif value == 8:
#         res = "Inform"
#     else:
#         res = "Unknown Option Message Type: " + value

def custom_action(packet):
    message_type = getDHCPMessageType(packet['BOOTP'].op)
    
    dhcp_options, message_type, option55, vendor_class_id, host_name, mac_address = getDHCPOptions(packet['DHCP'].options)

    matched_fp = fingerprint_lookup(dhcp_options, message_type, option55, vendor_class_id)    
    
    # parse_dhcp_packet(packet)

    try:
        f = open('dhcp_data.txt', 'a')
        print('[*] ' + host_name + ' : ' + mac_address + ' : ' + matched_fp['fingerprint'][0][1])
        f.write('[*] ' + host_name + ' : ' + mac_address + ' : ' + matched_fp['fingerprint'][0][1] + '\n')
        f.close()
    except Exception as e:
        print(e)

    # print(dhcp_options)
    # print(message_type)
    # print(option55)
    # print(vendor_class_id)
def sniff_dhcp_packets(selected_interface):
    sniff(iface=selected_interface, filter="port 67", prn=custom_action)

def main(selected_interface):
    
    wireless_interfaces = deauth2.check_available_wireless_interfaces()

    mon_interface = None

    if len(wireless_interfaces) < 2:
        print('[*] No additional wireless interface is available')
        exit()
    else:
        for w_interface in wireless_interfaces:
            if w_interface['interface_name'] != selected_interface:
                mon_interface = w_interface
                break

    if mon_interface:
        mon_interface_name = mon_interface['interface_name']
        if mon_interface_name != '' and mon_interface['type'] != 'monitor':
            deauth2.switch_to_monitor_mode(mon_interface_name)
        
    time.sleep(5)

    # start sniffing here
    sniff_thread = threading.Thread(target=sniff_dhcp_packets, args=(selected_interface,))
    sniff_thread.start()

    deauthentication_thread = threading.Thread(target=deauth2.deauthenticate, args=(mon_interface['interface_name'],selected_interface))
    deauthentication_thread.start()

        # deauth.deauthenticate(mon_interface['interface_name'])

    # sniff(filter="port 67", prn=custom_action)

if __name__=='__main__':
    interface = 'wlp0s20f3'
    main(interface)