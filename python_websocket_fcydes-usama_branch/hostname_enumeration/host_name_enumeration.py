import concurrent.futures
import socket
import dns
import ipaddress
import dns.resolver


from packet_headers import udp_header
from packet_headers import mdns
from packet_headers import nbns

def nbns_enumeration(udp_packet, target_ip):

    src_port = 12345
    dest_port = 137

    nbns_header = nbns.generate_nbns_request_header()
    nbns_header_length = len(nbns_header)
    udp_header = udp_packet.generate_udp_packet(src_port, dest_port, nbns_header_length)
    
    final_header = udp_header + nbns_header

    sock = socket.socket(socket.AF_INET, socket.SOCK_RAW,socket.IPPROTO_UDP)
    
    response = udp_packet.send_udp_packet(final_header, target_ip, dest_port, sock)

    if response:
        answer_name_1 = nbns.parse_nbns_response(response)

        return target_ip, answer_name_1
    
    else:
        return target_ip, 'None'

def mdns_enumeration(udp_packet, target_ip):
    
    dest_ip = '224.0.0.251'

    src_port = 5353
    dest_port = 5353
    
    mdns_header = mdns.generate_mdns_header(target_ip)
    mdns_header_length = len(mdns_header)

    udp_header = udp_packet.generate_udp_packet(src_port, dest_port, mdns_header_length)
    
    final_header = udp_header + mdns_header

    sock = socket.socket(socket.AF_INET, socket.SOCK_RAW,socket.IPPROTO_UDP)

    response = mdns.send_mdns_udp_packet(final_header, dest_ip, dest_ip, dest_port, sock)

    if response:
        domain_name = mdns.parse_mdns_response()

        return target_ip, domain_name
    
    else:
        return target_ip, 'None'

def enumerate_hostname(info_gather, targets):
    
    module = 'Hostname Enumeration'
    sub_module = ''
    event_type = 'hostname_enumeration_started'
    info_gather.send_module_time_to_server(module, sub_module, event_type, None, None, None)
    
    if info_gather.ip_type == 'private':

        udp_packet = udp_header.UDP_Packet()

        # for target in targets:
        #     target_ip, status = nbns_enumeration(udp_packet, target)

            # if not status:
            #     target_ip, status = mdns_enumeration(udp_packet, target)


        with concurrent.futures.ThreadPoolExecutor(5) as executor:
            threads = []
            for target in targets:
                threads.append(executor.submit(nbns_enumeration, udp_packet, target))

            for thread in concurrent.futures.as_completed(threads): # Wait for all the threads to finish
                target_ip, hostname = thread.result()

                if hostname != 'None':
                    
                    tempDict1 = dict(dest_host=target_ip, host_name=hostname)
                    print(tempDict1)
                    info_gather.send_data_to_server(tempDict1, 'host_name_detected')
                    
                    targets.remove(target_ip)

                    info_gather. add_host_names_to_result(tempDict1)
                
                else:
                    tempDict1 = dict(dest_host=target_ip, host_name='')
                    info_gather. add_host_names_to_result(tempDict1)

        with concurrent.futures.ThreadPoolExecutor(5) as executor:
            threads = []
            for target in targets:
                threads.append(executor.submit(mdns_enumeration, udp_packet, target))

            for thread in concurrent.futures.as_completed(threads): # Wait for all the threads to finish
                target_ip, hostname = thread.result()

                if hostname != 'None':
                    
                    tempDict1 = dict(dest_host=target_ip, host_name=hostname)
                    print(tempDict1)
                    info_gather.send_data_to_server(tempDict1, 'host_name_detected')

                    targets.remove(target_ip)

                    info_gather.add_host_names_to_result(tempDict1)
                
                else:
                    tempDict1 = dict(dest_host=target_ip, host_name='')
                    info_gather.add_host_names_to_result(tempDict1)
    
    if info_gather.ip_type == 'public':

        for target in targets:
            name = ipaddress.ip_address(target).reverse_pointer

            hostname = 'None'

            try:
                result = dns.resolver.resolve(name, 'PTR')

                for val in result:
                    hostname = val.to_text()

                    tempDict1 = dict(dest_host=target, host_name=hostname)
                    print(tempDict1)

                    info_gather.send_data_to_server(tempDict1, 'host_name_detected')

                    info_gather.add_host_names_to_result(tempDict1)

            except Exception as e:
                tempDict1 = dict(dest_host=target, host_name='')
                info_gather.add_host_names_to_result(tempDict1)
                print(e)


    module = 'Hostname Enumeration'
    sub_module = ''
    event_type = 'hostname_enumeration_finished'
    info_gather.send_module_time_to_server(module, sub_module, event_type, None, None, None)
    