import sqlite3
import re
import codecs

def parse_service_probes_db():

    # f = open('python-client/service_version_enumeration/nmap-service-probes', 'r', encoding='utf-8')
    f = codecs.open('nmap-service-probes', 'r')

    data = f.readlines()

    data2 = f.read()
    probes_list = []
    probes_matches_list = []
    probes_softmatches_list = []

    re_pattern = r'(m%.+?%)|(m@.+?@)|(m\/.+?\/)|(m=.+?=)|(m\|.+?\|)'
    # re_vendor_product_name = r''
    # re_version = r''
    # re_info = r''
    # re_hostname = r''
    # re_operating_system = r''
    # re_device_type = r''

    i = 0
    service_probes_file_length = (len(data))
    while i < (len(data)):
        if not data[i].startswith('# ') and data[i] != '\n':
            # if data[i] == '##############################NEXT PROBE##############################\n':
            if data[i].startswith('Probe '):
                probe_maches = []
                probe_softmatches = []
                probe_id = ''
                probe_protocol = ''
                probe_name = ''
                probe_payload = ''
                rarity = ''
                ports = ''
                sslports = ''
                fallback = ''
                totalwaitms = ''
                tcpwrappedms = ''

                d = data[i]
                d = d.lstrip('Probe ').rstrip('\n')
                probe_id = d
                d = d.split(' ', 2)
                probe_protocol = d[0]
                probe_name = d[1]
                probe_payload = d[2].lstrip('q|').rstrip('|')
                
                while i < (service_probes_file_length-1):
                    i += 1
                    try:
                        d = data[i]
                    except Exception as e:
                        print(e)
                    # if d == '##############################NEXT PROBE##############################\n':
                    if d.startswith('Probe '):
                        i -= 1
                        break
                        
                    # elif d.startswith('Probe '):
                        # d = d.lstrip('Probe ').rstrip('\n')
                        # probe_id = d
                        # d = d.split(' ')
                        # probe_protocol = d[0]
                        # probe_name = d[1]
                        # probe_payload = d[2]
                    elif d.startswith('rarity '):
                        d = d.lstrip('rarity ').rstrip('\n')
                        rarity = int(d)
                    elif d.startswith('ports '):
                        ports_data = d

                        ports_data = ports_data.lstrip('ports ').rstrip('\n')

                        ports_list = ports_data.split(',')

                        for p in ports_list:
                            if '-' in p:
                                port_range = p.split('-')
                                lower = int(port_range[0])
                                upper = int(port_range[1])
                                for x in range(lower, (upper+1)):
                                    ports += str(x) + ','
                            else:
                                ports += p + ','

                        ports = ports.rstrip(',')
                        
                    elif d.startswith('sslports '):
                        d = d.lstrip('sslports ').rstrip('\n')
                        sslports = d
                    elif d.startswith('fallback '):
                        d = d.lstrip('fallback ').rstrip('\n')
                        fallback = d
                    elif d.startswith('totalwaitms '):
                        d = d.lstrip('totalwaitms ').rstrip('\n')
                        totalwaitms = d
                    elif d.startswith('tcpwrappedms '):
                        d = d.lstrip('tcpwrappedms ').rstrip('\n')
                        tcpwrappedms = d
                    elif d.startswith('match '):
                        pattern = ''
                        case_insensitive = ''
                        add_newline = ''
                        matches = re.findall(re_pattern, d)[0]
                        for match in matches:
                            if match != '':
                                pattern = match

                        service = d.split(' ')[1]

                        # version_info = d.replace(pattern, '').replace(service, '').replace('match', '').replace('\n', '').strip()
                        version_info = d.replace(pattern, '').split(' ', 2)[2].strip()

                        if version_info[0:2] == 's ':
                            case_insensitive = 's'
                        elif version_info[0:2] == 'i ':
                            add_newline = 'i'

                        probes_matches_list.append({'probe_id':probe_id, 'probe_name':probe_name, 'probe_maches':d, 'service':service, 'pattern':pattern, 'version_info':version_info, 'case_insensitive':case_insensitive, 'add_newline':add_newline})
                        # probe_maches.append(d)
                    elif d.startswith('softmatch '):
                        pattern = ''
                        matches = re.findall(re_pattern, d)[0]
                        for match in matches:
                            if match != '':
                                pattern = match

                        service = d.split(' ')[1]
                        
                        # version_info = d.replace(pattern, '').replace(service, '').replace('softmatch', '').replace('\n', '').strip()
                        version_info = d.replace(pattern, '').split(' ', 2)[2].strip()
                        
                        if version_info[0:2] == 's ':
                            case_insensitive = 's'
                        elif version_info[0:2] == 'i ':
                            add_newline = 'i'

                        probes_softmatches_list.append({'probe_id':probe_id, 'probe_name':probe_name, 'probe_softmatches':d, 'service':service, 'pattern':pattern, 'version_info':version_info, 'case_insensitive':case_insensitive, 'add_newline':add_newline})
                        # probe_softmatches.append(d)

                tempDict = dict(probe_id=probe_id, probe_name=probe_name, probe_protocol=probe_protocol, probe_payload=probe_payload, rarity=rarity, ports=ports, sslports=sslports, fallback=fallback, totalwaitms=totalwaitms, tcpwrappedms=tcpwrappedms)
                probes_list.append(tempDict)
                
                # tempDict2 = dict(probe_name=probe_name, probe_maches=probe_maches)
                # probes_matches_list.append(tempDict2)

                # tempDict3 = dict(probe_name=probe_name, probe_softmatches=probe_softmatches)
                # probes_softmatches_list.append(tempDict3)

        i += 1

    return probes_list, probes_matches_list, probes_softmatches_list

def write_probes_list_to_db(probes_list):
    
    con = sqlite3.connect('services_probes.db')
    cur = con.cursor()
    
    # Create table
    try:
        # tempDict = dict(probe_name=probe_name, rarity=rarity, ports=ports, sslports=sslports, fallback=fallback, totalwaitms=totalwaitms, tcpwrappedms=tcpwrappedms)
        cur.execute('''CREATE TABLE probes (probe_id text, probe_name text, probe_protocol text, probe_payload text, rarity INTEGER, ports text, sslports text, fallback text, totalwaitms text, tcpwrappedms text)''')
    except Exception as e:
        print(e)
    
    cur.executemany("insert into probes values (:probe_id, :probe_name, :probe_protocol, :probe_payload, :rarity, :ports, :sslports, :fallback, :totalwaitms, :tcpwrappedms)", probes_list)
    
    con.commit()
    
    con.close()
    

def write_probes_matches_list_to_db(probes_matches_list):
    
    con = sqlite3.connect('services_probes.db')
    cur = con.cursor()
    
    # Create table
    try:
        cur.execute('''CREATE TABLE probe_matches (probe_id text, probe_name text, probe_maches text, service text, pattern text, version_info text, case_insensitive text, add_newline text)''')
    except Exception as e:
        print(e)
    
    cur.executemany("insert into probe_matches values (:probe_id, :probe_name, :probe_maches, :service, :pattern, :version_info, :case_insensitive, :add_newline)", probes_matches_list)
    
    con.commit()
    
    con.close()

def write_probes_softmatches_list_to_db(probes_softmatches_list):
    
    con = sqlite3.connect('services_probes.db')
    cur = con.cursor()
    
    # Create table
    try:
        cur.execute('''CREATE TABLE probe_softmatches (probe_id text, probe_name text, probe_softmatches text, service text, pattern text, version_info, case_insensitive text, add_newline text)''')
    except Exception as e:
        print(e)
    
    cur.executemany("insert into probe_softmatches values (:probe_id, :probe_name, :probe_softmatches, :service, :pattern, :version_info, :case_insensitive, :add_newline)", probes_softmatches_list)
    
    con.commit()
    
    con.close()

if __name__=='__main__':
    
    probes_list, probes_matches_list, probes_softmatches_list = parse_service_probes_db()

    write_probes_list_to_db(probes_list)

    write_probes_matches_list_to_db(probes_matches_list)
    
    write_probes_softmatches_list_to_db(probes_softmatches_list)
    