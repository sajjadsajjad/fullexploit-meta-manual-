from asyncio import events
import sqlite3
import os
import json

def get_scan_details_data(db_conn, user_id, web_socket):

    cursor = db_conn.cursor()

    cursor.execute('''SELECT * from scan_details;''')

    scan_details = cursor.fetchone()

    user_input = scan_details[0]
    host_discovery = scan_details[1]
    port_scanning = scan_details[2]
    scan_type = scan_details[3]
    interface = scan_details[4]
    mode = scan_details[5]


    cursor.execute('''SELECT * from module_timestamps''')
    module_timestamps = cursor.fetchall()

    module_timestamps_list = []
    for module_time in module_timestamps:
        module = module_time[0]
        start_time = module_time[1]
        completion_time = module_time[2]
        elapsed_time = module_time[3]

        tempDict = dict(module=module, start_time=start_time, completion_time=completion_time, elapsed_time=elapsed_time)

        module_timestamps_list.append(tempDict)

    dataDict = dict(user_input=user_input, host_discovery=host_discovery, port_scanning=port_scanning, 
                    interface=interface, mode=mode, time_stamps=module_timestamps_list)

    event_type = 'requested_report_data_sent'
    tempDict = dict(user_id=user_id, eventType=event_type, data=dataDict)
    web_socket.send(json.dumps(tempDict))


def get_information_gathering_data(db_conn, user_id, web_socket):
    
    information_gathering_results_list = []
    ports_frequency_dict = {}
    port_services_frequency_dict = {}
    operating_systems_frequency_dict = {}


    cursor = db_conn.cursor()

    cursor.execute('''SELECT * from hosts INNER JOIN os WHERE hosts.dest_host = os.dest_host;''')

    hosts = cursor.fetchall()

    for host in hosts:

        cmd = "SELECT * from ports WHERE dest_host = '" + host[0] + "' and port !='';"
        cursor.execute(cmd)
        ports = cursor.fetchall()


        ports_list = []
        for port in ports:
            tempDict1 = dict(port=port[1],service=port[2],service_version_display=port[3],vendor_product_name=port[4],version=port[5],info=port[6],hostname=port[7],operating_system=port[8],device_type=port[9])
            ports_list.append(tempDict1)

            ports_frequency_dict[port[1]] = 0   # for stats

            port_services_frequency_dict[port[2]] = 0

        tempDict2 = dict(ip=host[0], mac=host[1], vendor=host[2], os=host[4], ports=ports_list)

        information_gathering_results_list.append(tempDict2)

        operating_systems_frequency_dict[host[4]] = 0   # for stats

    cursor.execute('''SELECT count(*) from hosts;''')
    total_hosts = cursor.fetchone()[0]
    
    cursor.execute('''SELECT count(*) from ports where port !='';''')
    total_ports = cursor.fetchone()[0]
    

    cursor.execute('''SELECT count(*) from ports WHERE service_version_display!='';''')
    total_services = cursor.fetchone()[0]
    
    cursor.execute('''SELECT port from ports where port !='';''')
    ports = cursor.fetchall()
    for port in ports:
        port = port[0]
        ports_frequency_dict[port] += 1

    ports_frequency_list = sorted(ports_frequency_dict.items(), key=lambda x: x[1], reverse=True)    


    cursor.execute('''SELECT os_name from os;''')
    operating_systems = cursor.fetchall()
    for operating_system in operating_systems:
        operating_system = operating_system[0]
        operating_systems_frequency_dict[operating_system] += 1

    operating_systems_frequency_list = sorted(operating_systems_frequency_dict.items(), key=lambda x: x[1], reverse=True)    


    cursor.execute('''SELECT service from ports where service != '';''')
    ports_services = cursor.fetchall()
    for port_service in ports_services:
        port_service = port_service[0]
        port_services_frequency_dict[port_service] += 1

    port_services_frequency_list = sorted(port_services_frequency_dict.items(), key=lambda x: x[1], reverse=True)    

    
    module = 'information_gathering'
    event_type = 'requested_report_data_sent'

    info_gathering_stats = dict(
                                total_hosts=total_hosts,
                                total_ports=total_ports,
                                total_services=total_services,
                                open_ports_frequency=ports_frequency_list,
                                os_frequency=operating_systems_frequency_list,
                                services_frequency=port_services_frequency_list,
                                # info_gathering_data=information_gathering_results_list
                            )

    tempDict = dict(user_id=user_id, eventType=event_type, data=dict(module=module, info_gathering_stats=info_gathering_stats))
    web_socket.send(json.dumps(tempDict))

      
def get_vulnerabilities_data(db_conn, user_id, web_socket):
    
    cursor = db_conn.cursor()

    cmd = "SELECT count(*) from vulnerabilities;"
    cursor.execute(cmd)
    total_vulnerabilities = cursor.fetchone()[0]
    
    cmd = "SELECT DISTINCT port from vulnerabilities;"
    cursor.execute(cmd)
    vulnerable_ports = cursor.fetchall()
    total_vulnerable_ports = len(vulnerable_ports)
    
    cmd = "SELECT DISTINCT service from vulnerabilities;"
    cursor.execute(cmd)
    vulnerable_services = cursor.fetchall()
    total_vulnerable_services = len(vulnerable_services)

    cmd_critical = '''select count(*) FROM vulnerabilities WHERE (
                                                        (cvss_v2_severity != '' and cvss_v3_severity == 'CRITICAL') 
                                                        OR 
                                                        (cvss_v2_severity == 'CRITCIAL' and cvss_v3_severity == '') 
                                                        OR 
                                                        (cvss_v2_severity == '' and cvss_v3_severity == 'CRITCIAL'));'''

    cmd_high = '''select count(*) FROM vulnerabilities WHERE (
                                                        (cvss_v2_severity != '' and cvss_v3_severity == 'HIGH') 
                                                        OR 
                                                        (cvss_v2_severity == 'HIGH' and cvss_v3_severity == '') 
                                                        OR 
                                                        (cvss_v2_severity == '' and cvss_v3_severity == 'HIGH'));'''

    cmd_medium = '''select count(*) FROM vulnerabilities WHERE (
                                                        (cvss_v2_severity != '' and cvss_v3_severity == 'MEDIUM') 
                                                        OR 
                                                        (cvss_v2_severity == 'MEDIUM' and cvss_v3_severity == '') 
                                                        OR 
                                                        (cvss_v2_severity == '' and cvss_v3_severity == 'MEDIUM'));'''
    
    cmd_low = '''select count(*) FROM vulnerabilities WHERE (
                                                        (cvss_v2_severity != '' and cvss_v3_severity == 'LOW') 
                                                        OR 
                                                        (cvss_v2_severity == 'LOW' and cvss_v3_severity == '') 
                                                        OR 
                                                        (cvss_v2_severity == '' and cvss_v3_severity == 'LOW'));'''
    
    cmd_info = '''select count(*) FROM vulnerabilities WHERE (
                                                        (cvss_v2_severity == '' and cvss_v3_severity == ''));'''

    cursor.execute(cmd_critical)
    total_critical_vulnerabilities = cursor.fetchone()[0]

    cursor.execute(cmd_high)
    total_high_vulnerabilities = cursor.fetchone()[0]

    cursor.execute(cmd_medium)
    total_medium_vulnerabilities = cursor.fetchone()[0]

    cursor.execute(cmd_low)
    total_low_vulnerabilities = cursor.fetchone()[0]

    cursor.execute(cmd_info)
    total_info_vulnerabilities = cursor.fetchone()[0]

    vulnerability_severity_frequency_dict = dict(critical_vulnerabilities=total_critical_vulnerabilities,
                                                high_vulnerabilities=total_high_vulnerabilities,
                                                medium_vulnerabilities=total_medium_vulnerabilities,
                                                low_vulnerabilities=total_low_vulnerabilities,
                                                informational=total_info_vulnerabilities)

    vulnerability_severity_frequency_list = [
                                                ['critical_vulnerabilities',total_critical_vulnerabilities],
                                                ['high_vulnerabilities',total_high_vulnerabilities],
                                                ['medium_vulnerabilities',total_medium_vulnerabilities],
                                                ['low_vulnerabilities',total_low_vulnerabilities],
                                                ['informational',total_info_vulnerabilities]
                                            ]

    cmd = "SELECT DISTINCT ip from vulnerabilities;"
    cursor.execute(cmd)
    vulnerable_ips = cursor.fetchall()
    ip_vulnerabilities_frequency_dict = {}
    for vulnerable_ip in vulnerable_ips:
        vulnerable_ip = vulnerable_ip[0]

        cmd = '''SELECT count(*) from vulnerabilities where ip = '{0}';'''.format(vulnerable_ip)
        cursor.execute(cmd)
        ip_vulnerability_count = cursor.fetchone()[0]

        ip_vulnerabilities_frequency_dict[vulnerable_ip] = ip_vulnerability_count

    vulnerable_ips_frequency_list = sorted(ip_vulnerabilities_frequency_dict.items(), key=lambda x: x[1], reverse=True)

    cmd = 'SELECT port from vulnerabilities;'
    cursor.execute(cmd)
    vulnerable_ports = cursor.fetchall()
    vulnerable_ports_frequency_dict = {}
    for vulnerable_port in vulnerable_ports:
        vulnerable_port = vulnerable_port[0]
        try:
            vulnerable_ports_frequency_dict[vulnerable_port] += 1
        except:
            vulnerable_ports_frequency_dict[vulnerable_port] = 0
            vulnerable_ports_frequency_dict[vulnerable_port] += 1

    vulnerable_ports_frequency_list = sorted(vulnerable_ports_frequency_dict.items(), key=lambda x: x[1], reverse=True)    

    cmd = 'SELECT cve_id from vulnerabilities;'
    cursor.execute(cmd)
    cve_ids = cursor.fetchall()
    cve_ids_frequency_dict = {}
    for cve_id in cve_ids:
        cve_id = cve_id[0]
        try:
            cve_ids_frequency_dict[cve_id] += 1
        except:
            cve_ids_frequency_dict[cve_id] = 0
            cve_ids_frequency_dict[cve_id] += 1

    vulnerable_cves_frequency_list = sorted(cve_ids_frequency_dict.items(), key=lambda x: x[1], reverse=True)    

    cmd = 'SELECT service from vulnerabilities;'
    cursor.execute(cmd)
    vulnerable_services = cursor.fetchall()
    vulnerable_services_frequency_dict = {}
    for vulnerable_service in vulnerable_services:
        vulnerable_service = vulnerable_service[0]
        try:
            vulnerable_services_frequency_dict[vulnerable_service] += 1
        except:
            vulnerable_services_frequency_dict[vulnerable_service] = 0
            vulnerable_services_frequency_dict[vulnerable_service] += 1


    vulnerable_services_frequency_list = sorted(vulnerable_services_frequency_dict.items(), key=lambda x: x[1], reverse=True)    

    cmd = 'SELECT os_name from os INNER JOIN vulnerabilities on dest_host=ip;'
    cursor.execute(cmd)
    vulnerable_oses = cursor.fetchall()
    vulnerable_oses_frequency_dict = {}
    for vulnerable_os in vulnerable_oses:
        vulnerable_os = vulnerable_os[0]
        try:
            vulnerable_oses_frequency_dict[vulnerable_os] += 1
        except:
            vulnerable_oses_frequency_dict[vulnerable_os] = 0
            vulnerable_oses_frequency_dict[vulnerable_os] += 1
    
    vulnerable_oses_frequency_list = sorted(vulnerable_oses_frequency_dict.items(), key=lambda x: x[1], reverse=True)

    
    vulnerability_analysis_stats = dict(total_vulnerabilities=total_vulnerabilities, total_vulnerable_ports=total_vulnerable_ports,
                                    total_vulnerable_services=total_vulnerable_services, vulnerability_severity_levels=vulnerability_severity_frequency_list,
                                    vulnerable_ips_frequency_list=vulnerable_ips_frequency_list, vulnerable_ports_frequency_list=vulnerable_ports_frequency_list,
                                    vulnerable_cves_frequency_list=vulnerable_cves_frequency_list,vulnerable_services_frequency_list=vulnerable_services_frequency_list,
                                    vulnerable_oses_frequency_list=vulnerable_oses_frequency_list)
                                        

    
    module = 'vulnerability_analysis'
    event_type = 'requested_report_data_sent'

    tempDict = dict(user_id=user_id, eventType=event_type, data=dict(module=module, vulnerability_analysis_stats=vulnerability_analysis_stats))
    web_socket.send(json.dumps(tempDict))

    return total_vulnerabilities, vulnerability_severity_frequency_dict

def get_exploitation_data(db_conn, user_id, web_socket, total_vulnerabilities, vulnerability_severity_frequency_dict):
    
    cursor = db_conn.cursor()

    cmd = "SELECT count(*) from found_exploits;"
    cursor.execute(cmd)
    total_exploited_vulnerabilities = cursor.fetchone()[0]
    
    success_ratio = round((total_exploited_vulnerabilities/total_vulnerabilities * 100), 2)
    
    cmd = "SELECT ip from found_exploits;"
    cursor.execute(cmd)
    exploiatable_ips_frequency = cursor.fetchall()
    exploitable_ips_frequency_dict = {}
    for exploitable_ip in exploiatable_ips_frequency:
        ip = exploitable_ip[0]
        try:
            exploitable_ips_frequency_dict[ip] += 1
        except:
            exploitable_ips_frequency_dict[ip] = 0
            exploitable_ips_frequency_dict[ip] += 1
    
    exploitable_ips_frequency_list = sorted(exploitable_ips_frequency_dict.items(), key=lambda x: x[1], reverse=True)
    
    cmd = "SELECT port from found_exploits;"
    cursor.execute(cmd)
    exploiatable_ports_frequency = cursor.fetchall()
    exploitable_ports_frequency_dict = {}
    for exploitable_port in exploiatable_ports_frequency:
        port = exploitable_port[0]
        try:
            exploitable_ports_frequency_dict[port] += 1
        except:
            exploitable_ports_frequency_dict[port] = 0
            exploitable_ports_frequency_dict[port] += 1
    
    exploitable_ports_frequency_list = sorted(exploitable_ports_frequency_dict.items(), key=lambda x: x[1], reverse=True)
    

    cmd = "SELECT service from found_exploits;"
    cursor.execute(cmd)
    exploiatable_services_frequency = cursor.fetchall()
    exploitable_services_frequency_dict = {}
    for exploitable_service in exploiatable_services_frequency:
        service = exploitable_service[0]
        try:
            exploitable_services_frequency_dict[service] += 1
        except:
            exploitable_services_frequency_dict[service] = 0
            exploitable_services_frequency_dict[service] += 1
    
    exploitable_services_frequency_list = sorted(exploitable_services_frequency_dict.items(), key=lambda x: x[1], reverse=True)
    

    cmd = "SELECT count(*) from found_exploits WHERE severity='CRITICAL';"
    cursor.execute(cmd)
    executed_exploits_critical_severity = cursor.fetchone()
    executed_exploits_critical_severity = executed_exploits_critical_severity[0]

    cmd = "SELECT count(*) from found_exploits WHERE severity='HIGH';"
    cursor.execute(cmd)
    executed_exploits_high_severity = cursor.fetchone()
    executed_exploits_high_severity = executed_exploits_high_severity[0]

    cmd = "SELECT count(*) from found_exploits WHERE severity='MEDIUM';"
    cursor.execute(cmd)
    executed_exploits_medium_severity = cursor.fetchone()
    executed_exploits_medium_severity = executed_exploits_medium_severity[0]

    cmd = "SELECT count(*) from found_exploits WHERE severity='LOW';"
    cursor.execute(cmd)
    executed_exploits_low_severity = cursor.fetchone()
    executed_exploits_low_severity = executed_exploits_low_severity[0]

    cmd = "SELECT count(*) from found_exploits WHERE severity='INFO';"
    cursor.execute(cmd)
    executed_exploits_info_severity = cursor.fetchone()
    executed_exploits_info_severity = executed_exploits_info_severity[0]
    
    exploitable_vulnerability_severity_frequency_dict = dict(
                                                total_critical_vulns=vulnerability_severity_frequency_dict['critical_vulnerabilities'],
                                                critical_vulnerabilities=executed_exploits_critical_severity,
                                                total_high_vulns=vulnerability_severity_frequency_dict['high_vulnerabilities'],
                                                high_vulnerabilities=executed_exploits_high_severity,
                                                total_medium_vulns=vulnerability_severity_frequency_dict['medium_vulnerabilities'],
                                                medium_vulnerabilities=executed_exploits_medium_severity,
                                                total_low_vulns=vulnerability_severity_frequency_dict['low_vulnerabilities'],
                                                low_vulnerabilities=executed_exploits_low_severity,
                                                total_info_vulns=vulnerability_severity_frequency_dict['informational'],
                                                informational=executed_exploits_info_severity)


    exploitation_stats = dict(total_exploited_vulnerabilities=total_exploited_vulnerabilities, success_ratio=success_ratio, 
                                exploitable_vulnerability_severity_frequency_dict=exploitable_vulnerability_severity_frequency_dict,
                                exploitable_ips_frequency_list=exploitable_ips_frequency_list, exploitable_ports_frequency_list=exploitable_ports_frequency_list, 
                                exploitable_services_frequency_list=exploitable_services_frequency_list)

    module = 'exploitation'
    event_type = 'requested_report_data_sent'

    tempDict = dict(user_id=user_id, eventType=event_type, data=dict(module=module, exploitation_stats=exploitation_stats))
    web_socket.send(json.dumps(tempDict)) 

def get_report_data(user_id, ws, info_gather, exploitation):

    results_db_path = 'results.db'
    db_conn = None
    if os.path.exists(results_db_path):
        db_conn = sqlite3.connect(results_db_path)

    if db_conn:

        if info_gather.information_gathering_status == 'Finished':
            get_scan_details_data(db_conn, user_id, ws)
            get_information_gathering_data(db_conn, user_id, ws)

        if info_gather.vulnerability_scanning_status == 'Finished':
            total_vulnerabilities, vulnerability_severity_frequency_dict = get_vulnerabilities_data(db_conn, user_id, ws)

        if exploitation.exploitation_status == 'finished':
            get_exploitation_data(db_conn, user_id, ws, total_vulnerabilities, vulnerability_severity_frequency_dict)
        
